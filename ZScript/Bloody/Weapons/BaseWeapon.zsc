Class BloodWeapon : DoomWeapon
{
	enum BFlag { WRF_DISABLE = WRF_NOFIRE|WRF_NOSWITCH, }
	bool rotdir;
	
	Default
	{
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobRangeX 0.2;
		Weapon.BobRangeY 0.25;
		Weapon.BobSpeed 2.0;
		Weapon.AmmoGive 0;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive2 0;
		Weapon.AmmoUse2 0;
		Decal "BulletHit";
		Radius 16;
		Height 20;
		Inventory.PickupSound "GotWeapon";
		+WEAPON.NOALERT
		//+WEAPON.NOAUTOFIRE
		+WEAPON.NODEATHDESELECT
		+WEAPON.NODEATHINPUT
		+INTERPOLATEANGLES
		BloodWeapon.xOff 0.;
	}
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		If(Owner) Return;
		Angle = frandom[Blood](0, 359);
		RotDir = random[Blood](0, 1);
	}
	
	Double xOff;
	Property xOff : xOff;
	
	States
	{
	Spawn: TNT1 A 1; Stop;
	SpawnLoop:
		"####" "#" 1 A_Turn(invoker.rotdir ? -4. : 4.);
		Loop;
	Select: "####" "#" 0;
	SelectLoop:
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 39, 48);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 27, 36);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 21, 28);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 15, 20);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 9, 12);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 3, 3);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 2, 2);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 1.5, 1.5);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 1, 1);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 0.5, 0.5);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 0.25, 0.25);
		"####" "###########################" 0 A_Raise();
		"####" "#" 0 A_Jump(256, "Ready");
		Stop;
	Deselect:
	DeselectLoop:
		"####" "#" 0 { BloodyHandler.DoSwing(Self, (0, -0.025), 0, -2, 6, SWING_Spring, 1, 2); }
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 3, 3);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 9, 12);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 15, 20);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 21, 28);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 27, 36);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 39, 48);
		"####" "#" 0
		{
			A_TakeInventory("DynamiteHolster", 1);
			For(int i = 100; i < 300; i++)
			{
				A_Overlay(i,"StopOverlay");
				A_Overlay(i + 500,"StopOverlay");
				A_TakeInventory("PitchforkBloodTimer",350);
				A_TakeInventory("PitchforkBloodAlpha",200);
			}
		}
		"####" "####################" 0 A_Lower();
	    "####" "#" 1 A_Lower();
		Goto DeselectLoop+9;
	Ready: "####" "#" 1 A_WeaponReady(); "####" "#" 0 ResolveState("Ready"); Stop;
	Fire: "####" "#" 1 A_FireBullets(0,0,-1,666,"BulletPuff"); "####" "#" 0 ResolveState("Ready"); Stop;
	StopOverlay: TNT1 A 1; Stop;
	
	DeathStuff:
		TNT1 A 1 A_JumpIf(Invoker.InStateSequence(CurState, ResolveState("Ready")), "Deselect");
		Loop;
	
	/*Reselect:
		"####" "#" 0
		{
			If(CountInv("TeslaCannon") && CountInv("Charges")) { A_SelectWeapon("TeslaCannon"); }
			If(CountInv("SawnOffShotgun") && CountInv("Shells")) { A_SelectWeapon("SawnOffShotgun"); }
			If(CountInv("TommyGun") && CountInv("Bullets")) { A_SelectWeapon("TommyGun"); }
			//If(CountInv("VoodooDoll") && CountInv("VoodooMagic")) { A_SelectWeapon("VoodooDoll"); }
			If(CountInv("LifeLeech") && CountInv("TrappedSoul")) { A_SelectWeapon("LifeLeech"); }
			//If(CountInv("Dynamite") && CountInv("TNTBundle")) { A_SelectWeapon("Dynamite"); }
			If(CountInv("Incinerator") && CountInv("Napalm")) { A_SelectWeapon("Incinerator"); }
			//If(CountInv("SprayCan") && CountInv("Aerosol")) { A_SelectWeapon("SprayCan"); }
			//If(CountInv("FlareGun") && CountInv("Flares")) { A_SelectWeapon("FlareGun"); }
			//If(CountInv("DynamiteR") && CountInv("TNTBundleR")) { A_SelectWeapon("DynamiteR"); }
			//If(CountInv("DynamiteP") && CountInv("TNTBundleP")) { A_SelectWeapon("DynamiteP"); }
			A_SelectWeapon("Pitchfork");
		}
		"####" "#" 0 A_Jump(256,"Ready");
		Stop;*/
	}	
	
	Action State A_WeaponReady2(int flags = 0, double x = 0, double y = 0, bool add = 0, bool interpolate = 1)
	{
		int fff;
		If(add) fff = WOF_ADD;
		If(interpolate) fff = WOF_INTERPOLATE;
		If(add && interpolate) fff = WOF_INTERPOLATE|WOF_ADD;
		
		A_WeaponReady(Flags);
		A_WeaponOffset(x+Invoker.xOff,y+24, fff);
		
		If((Invoker.Owner.Health <= 0 || (!Invoker.Owner.CountInv("Power_Akimbo") && Invoker.bPOWERED_UP)) && (Flags & WRF_NOSWITCH) != WRF_NOSWITCH) Return A_Jump(256, "Deselect");
		Return ResolveState(Null);
	}
	
	Action void A_Akimbo(int id = -10, statelabel start = null, int flags = 0, double alpha = 1.0, int style = STYLE_Normal)
	{
		A_Overlay(id, start);
		A_OverlayFlags(id, flags|PSPF_MIRROR|PSPF_FLIP|PSPF_ADDBOB, 1);
		A_OverlayFlags(id, PSPF_ADDWEAPON, 0);
		A_OverlayRenderstyle(id, style);
		A_OverlayAlpha(id, alpha);
	}
	
	Action void A_AkimboOffset(int id = -10, double wx = 0, double wy = 0, bool add = 0, bool interpolate = 1)
	{
		int fff;
		If(add) fff = WOF_ADD;
		If(interpolate) fff = WOF_INTERPOLATE;
		If(add && interpolate) fff = WOF_INTERPOLATE|WOF_ADD;
		A_OverlayOffset(id, (wx + Invoker.xOff), wy + 24, fff);
	}
	
	Action void A_AkimboOffset2(int id = -10, double wx = 0, double wy = 0)
	{
		Let psp = Player.GetPSprite(-10); //Player.GetPSprite((id != -10) ? -10 : id);
		A_OverlayOffset(id, wx + psp.x, wy + psp.y, WOF_INTERPOLATE);
	}
	
	action bool PressingFire() { return player.cmd.buttons&BT_ATTACK; }
	action bool PressingAltfire() { return player.cmd.buttons&BT_ALTATTACK; }
	
	Override void Tick()
	{
		Super.Tick();
		if ( !Owner || !Owner.player || (Owner.player.ReadyWeapon != self) ) return;
		Owner.player.WeaponState |= WF_WEAPONBOBBING;
	}
}

Class TempWeapon : BloodWeapon
{
	Default { Tag "Unarmed"; }
	States
	{
	Select: TNT1 A 0 A_Raise(); Loop;
	Deselect: TNT1 A 0 A_Lower(); Loop;
	Ready: TNT1 A 1 A_WeaponReady(WRF_DISABLESWITCH|WRF_NOFIRE); Loop;
	Fire: TNT1 A 0; Goto Ready;
	}
}

Class WeaponLight : DynamicLight
{
	int Timer;
	int HoldTics, FadeTics, SizeStep;
	double AlphaStep;
	
	Property Setup : HoldTics, FadeTics, AlphaStep, SizeStep;
	
	Default
	{
		DynamicLight.Type "Point";
		WeaponLight.Setup 2, 24, 0.75, 8;
		Args 255, 224, 128, 192;
	}
	
	override void Tick()
	{
		Super.Tick();
		
		If(!Master || Timer > FadeTics) { Destroy(); Return; }
		
		If(Master.Player) SetOrigin(Master.Vec2OffsetZ(0, 0, Master.Player.ViewZ), True);
		Else SetOrigin(Master.Pos, True);
		
		If(IsFrozen() && !bNOTIMEFREEZE) Return;
		
		Args[LIGHT_INTENSITY] -= SizeStep;
		
		If(Timer > HoldTics)
		{
			Args[LIGHT_RED] *= AlphaStep;
			Args[LIGHT_GREEN] *= AlphaStep;
			Args[LIGHT_BLUE] *= AlphaStep;
		}
		
		Timer++;
	}
}

/*
Class GlowHandler : Inventory
{
	Default
	{
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		Inventory.InterHubAmount 1;
		Args 50, 100, 0, 10; //OverlayID, BaseAlpha, HoldTime, FadeOutTime;
		RenderStyle "Translucent";
	} 
	
	bool init;
	int cnt;
	double astep, acurr;
	
	Override void DoEffect()
	{
		Super.DoEffect();
		
		If(!Owner || (Owner && !Owner.Player)) 
		{ 
			Destroy(); 
			Return; 
		}
		
		If(!Init)
		{
			Init = True;
			Owner.A_OverlayFlags(Args[0], PSPF_ALPHA|PSPF_RENDERSTYLE, 1);
			Owner.A_OverlayRenderstyle(Args[0], GetRenderstyle());
			Owner.A_OverlayAlpha(Args[0], Args[1] / 100);
			AStep = Args[1] / Args[3];
		}
		
		If(Cnt++ > Args[2])
		{
			ACurr = (Args[1] / 100) - (AStep * (Cnt - Args[2]));
			
			If(ACurr <= 0 || Cnt > (Args[3] - Args[2]))
			{
				Destroy();
				Return;
			}
			
			Owner.A_OverlayAlpha(Args[0], ACurr);
		}
	}
}

Class GlowHandler0 : GlowHandler {}
Class GlowHandler1 : GlowHandler {}
Class GlowHandler2 : GlowHandler {}
Class GlowHandler3 : GlowHandler {}
Class GlowHandler4 : GlowHandler {}
Class GlowHandler5 : GlowHandler {}
Class GlowHandler6 : GlowHandler {}
Class GlowHandler7 : GlowHandler {}
Class GlowHandler8 : GlowHandler {}
Class GlowHandler9 : GlowHandler {}
Class GlowHandler10 : GlowHandler {}
Class GlowHandler11 : GlowHandler {}
Class GlowHandler12 : GlowHandler {}
Class GlowHandler13 : GlowHandler {}
Class GlowHandler14 : GlowHandler {}
Class GlowHandler15 : GlowHandler {}
Class GlowHandler16 : GlowHandler {}
Class GlowHandler17 : GlowHandler {}
Class GlowHandler18 : GlowHandler {}
Class GlowHandler19 : GlowHandler {}
Class GlowHandler20 : GlowHandler {}
Class GlowHandler21 : GlowHandler {}
Class GlowHandler22 : GlowHandler {}
Class GlowHandler23 : GlowHandler {}
Class GlowHandler24 : GlowHandler {}
Class GlowHandler25 : GlowHandler {}
Class GlowHandler26 : GlowHandler {}
Class GlowHandler27 : GlowHandler {}
Class GlowHandler28 : GlowHandler {}
Class GlowHandler29 : GlowHandler {}
Class GlowHandler30 : GlowHandler {}