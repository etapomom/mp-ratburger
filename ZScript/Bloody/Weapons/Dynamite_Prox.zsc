Class BloodyDynamite_Prox : BloodyThrowable
{
	Default
	{
		Tag "TNT Bundle (Proximity)";
		Inventory.PickupMessage "Picked up a Proximity bomb.";
		Obituary "%o stood too close to %k's proximity bomb.";
		Weapon.SlotNumber 6;
		Weapon.SelectionOrder 3;
		Weapon.AmmoType "RocketAmmo";
		Weapon.AmmoType2 "RocketAmmo";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 1;
		Weapon.AmmoUse2 1;
		-WEAPON.CHEATNOTWEAPON
	}
	States
	{
	Spawn: TNT1 A 1; Stop;
	Select: TNTD A 0 Overlay(RightFX1, "Radar"); Goto SelectLoop;
	Deselect: TNTD A 0; Goto DeselectLoop;
	Ready:
		TNTD A 1 A_WeaponReady2();
		Loop;
	Fire:
		TNTD A 1 { A_WeaponReady2(WRF_DISABLE, 5, 10);		ThrowableCharge(); }
		TNTD A 1 { A_WeaponReady2(WRF_DISABLE, 9, 18); 		ThrowableCharge(); }
		TNTD A 1 { A_WeaponReady2(WRF_DISABLE, 16, 32); 	ThrowableCharge(); }
		TNTD A 1 { A_WeaponReady2(WRF_DISABLE, 19, 38); 	ThrowableCharge(); }
	Hold:
		TNTD A 1 
		{ 
			A_WeaponReady2(WRF_DISABLE, 20, 40); 	
			ThrowableCharge();
		}
		TNTD A 0 A_ReFire("Hold");
		Goto Release;
	Release:
		TNTD A 1 A_WeaponReady2(WRF_DISABLE, 28, 56);
		TNTD A 1 A_WeaponReady2(WRF_DISABLE, 36, 72);
		TNTD A 0 A_GunFlash();
		Goto Throw;
	Flash:
		TNT1 A 4 { ClearOverlay(RightFX1); ClearOverlay(RightGlow1); }
		TNTD A 0 ThrowDynamite("ProximityBombProj");
		Stop;
	BringBack:
		TNTD A 0 Overlay(RightFX1, "Radar");
		Goto BringBack_Raise;
	
	Radar:
		TNT1 A 0 Overlay(RightGlow1, "RadarGlow", 0.75);
		TNTD BBBCCCDDDEEEFFFBBBBBB 1 OverlayOffset(RightFX1, (0, 0));
		Loop;
	RadarGlow:
		TNTD BBBCCCDDDEEEFFFBBBBBB 1 BRIGHT OverlayOffset(RightGlow1, (0, 0));
		Loop;
	}
}

Class ProximityBombProj : DynamiteBase 
{
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		If(bAMBUSH) Timer = 35;
	}
	
	bool armed, done, hastened;
	Action void ProximityRadar()
	{
		If(Invoker.Armed && !Invoker.Done)
		{
			BlockThingsIterator bi = BlockThingsIterator.Create(Self, 64);
			While(bi.Next())
			{
				Actor a = bi.Thing;
				If( !a ||														// Nothing
					!self.CheckSight(a, 0xf) || 								// Not through walls
					(a == self) || 												// Not on self
					(Target && (a == Target) && !Ratburg_ProximitySelf) ||		// Not on owner, if enabled
					(a && (a is 'RatburgerBloodChunk1')) ||
					(a && (a is 'RatburgerBloodChunk1b')) ||
					(a && (a is 'RatburgerCorpseHitbox')) ||					// Not on gore objects
					(a && (a.Health <= 0)) ||
					(self.Distance3D(a) > 64) )									// Too far
						Continue;
				
				If(a.bSHOOTABLE)
				{
					A_StartSound("ProximityAlarm", CHAN_WEAPON, CHANF_OVERLAP, 1.0, 0.9);
					Invoker.Timer = Invoker.Hastened?0:10;
					Invoker.Done = True;
					If(Invoker.Hastened) SetStateLabel("Explode");
					Break;
				}
			}
		}
	}
	
	Action void ProximityArm(bool hasten = false) 
	{ 
		A_StartSound("ProximityArmed", CHAN_WEAPON, CHANF_OVERLAP, 1.0, 1.0); 
		Invoker.Armed = True; 
		If(hasten) Invoker.Hastened = True;
	}
	
	Override void Tick()
	{
		super.Tick();
		If(!IsFrozen()) DynamiteTrail("Green");
	}
	
	States
	{
	Bounce.Actor:
		TNT1 A 0 
		{
			bool hasten;
			hasten = (Tracer && !(Tracer is 'RatburgerBloodChunk1') && !(Tracer is 'RatburgerBloodChunk1b') && !(Tracer is 'RatburgerCorpseHitbox'));
			ProximityArm(hasten);
		}
	Bounce:
		TNT1 A 0 A_StartSound("TNTBounce", CHAN_BODY, CHANF_OVERLAP, 1.0);
	Spawn:
		TNT1 A 0 NoDelay A_Jump(8, 1, 2, 3, 4, 5, 6, 7, 8);
		Loop;
	See:
		TNTY FGHIJKLM 4 { If(Invoker.Armed && !Invoker.Done) ProximityRadar(); }
		Loop;
	Death:
		TNTY A 0 { Scale = (.8, .8); A_ChangeVelocity(invoker.prevspeed.x * 1.25, invoker.prevspeed.y * 1.25, 0, 0); A_StartSound("TNTBounce", CHAN_BODY, CHANF_OVERLAP, 1.0); }
		TNTY AAAABBBBCCCCDDDDEEEE 1
		{
			If(Self.Pos.Z <= FloorZ) Vel *= 0.99;
			If(Invoker.Timer-- <= -18 && !Invoker.Armed && !Invoker.Done) ProximityArm();
			If(Invoker.Armed && !Invoker.Done) ProximityRadar();
			If(Invoker.Done && Invoker.Timer-- <= 0) Return ResolveState("Explode");
			Return ResolveState(Null);
		}
		Goto Death+1;
	}
}