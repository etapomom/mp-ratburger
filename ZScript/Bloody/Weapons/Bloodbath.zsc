Class BloodbathClaws : BloodWeapon
{
	Default
	{
		Obituary "%o was mauled by %k.";
		Tag "Bloodbath";
		+WEAPON.WIMPY_WEAPON;
		+WEAPON.MELEEWEAPON;
		Weapon.SlotNumber -1;
		Weapon.SelectionOrder 10;
		Weapon.AmmoUse 0;
		Weapon.AmmoUse2 0;
	}
	
	Override void DoEffect()
	{
		Super.DoEffect();
		If(!Owner || !Owner.Player) Return;
		
		/*If(Owner.CountInv("BeastMeter") < 5000 && !Owner.CountInv("IsBloodbath")) 
			Owner.A_TakeInventory("BloodbathClaws", 1);*/
		
		If(Owner.CountInv("IsBloodbath") && Owner.Player.ReadyWeapon is 'BloodbathClaws')
			Owner.A_TakeInventory("BloodbathTimer", 1);
	}
	
	int tremble;
	
	States
	{
	Spawn:
		TNT1 A -1; 
		Stop;
	Select:
		CLAW F 0
		{
			A_Overlay(10, "Left_Select");
			A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1);
			Invoker.Owner.A_SetInvulnerable();
		}
		Goto SelectLoop;
	Deselect:
		CLAW F 0;
		Goto DeselectLoop;
	
	Ready:
		CLAW F 0 { A_StartSound("GoBeast", 0x666, 0, 1.0, 0.5); A_AlertMonsters(); }
		CLAW F 1
		{
			Invoker.Tremble += 1;
			A_WeaponReady2(	WRF_DISABLE, 
							frandom[Blood](-invoker.tremble, invoker.tremble) * 0.25, 
							frandom[Blood](-invoker.tremble, invoker.tremble) * 0.25);
			
			A_StopSound(CHAN_VOICE);
			A_SetBlend("DarkRed", 0.05 * invoker.tremble, 2);
			A_AlertMonsters();
			
			Double LookDelta;
			LookDelta = (24. - Pitch) / 5;
			Pitch += LookDelta;
			
			If(Invoker.Tremble >= 36) { Invoker.Tremble = 74; Return ResolveState("BloodbathStart"); }
			Return ResolveState(Null);
		}
		Goto Ready+1;
	Left_Select: CLAW F 1; Loop;
	BloodbathStart:
		CLAW A 0 
		{ 
			A_Overlay(10, "BloodbathStart_Left"); 
			A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); 
			A_GiveInventory("IsBloodbath"); 
			A_GiveInventory("BloodbathTimer", 1050);
			A_SetBlend("DarkRed", 1.0, 10);
			A_StartSound("BeastStart", 0x666, CHANF_LOCAL);
		}
		CLAW BBBBBBBBBBBBBBBBBBBBBBBBCCCDDDEEE 1
		{
			A_WeaponReady2(	WRF_DISABLE, 
							frandom[Blood](-invoker.tremble, invoker.tremble) * 0.45, 
							frandom[Blood](-invoker.tremble, invoker.tremble) * 0.45);
			
			A_StopSound(CHAN_VOICE);
			A_SetBlend("DarkRed", 0.025 * invoker.tremble, 2);
			A_AlertMonsters();
			
			Double LookDelta;
			LookDelta = (-24. - Pitch) / 5;
			Pitch += LookDelta;
			Invoker.Tremble -= 2;
		}
		TNT1 AAAAAAAAAAAAAAAAAA 1 { Double LookDelta; LookDelta = (0. - Pitch) / 10; Pitch += LookDelta; }
		CLAW A 0;
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 39, 48);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 27, 36);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 21, 28);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 15, 20);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 9, 12);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 3, 3);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 2, 2);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 1.5, 1.5);	A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 1, 1);		A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 0.5, 0.5);	A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		"####" "#" 1 { A_WeaponReady2(WRF_DISABLE, 0.25, 0.25);	A_Overlay(10, "Ready_Left"); A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1); }
		Goto BloodbathReady;
	BloodbathStart_Left:
		CLAW BBBBBBBBBBBBBBBBBBBBBBBBCCCDDDEEE  1;
		Stop;
		
		
	BloodbathReady:
		CLAW A 1
		{
			A_WeaponReady2(WRF_DISABLESWITCH);
			A_Overlay(10, "Ready_Left");
			A_OverlayFlags(10, PSPF_MIRROR|PSPF_FLIP, 1);
			
			If(CountInv("BloodbathTimer") <= 0) A_TakeInventory("BloodbathClaws");
		}
		Loop;
	Ready_Left: CLAW A 2; Stop;
	Fire:
		TNT1 A 1;
		Goto BloodbathReady;
	}
}

Class BloodbathTimer : Inventory { Default { Inventory.MaxAmount 1050; } }
Class IsBloodbath : Inventory { Default { Inventory.MaxAmount 1; } }