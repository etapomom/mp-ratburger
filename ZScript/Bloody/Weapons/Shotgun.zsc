Class SawnOffShotgun : BloodWeapon replaces Shotgun
{	
	Default
	{
		Tag "Sawn-off shotgun";
		Inventory.PickupMessage "Picked up a sawn-off.";
		Obituary "%o was destroyed by %k's shotgun.";
		Weapon.SlotNumber 3;
		Weapon.SelectionOrder 2;
		Weapon.AmmoType "Shells";
		Weapon.AmmoType2 "Shells";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoUse2 2;
		Scale 0.75;
		//Weapon.SisterWeapon "AkShotgun";
	}
	States
	{
	Spawn: SWOF AA 0; Goto SpawnLoop;
	Select:
		WP01 E 0 A_JumpIfInventory("ShotgunCount",2,"SelectLoop");
		WP01 C 0 A_JumpIfInventory("ShotgunCount",1,"SelectLoop");
		WP01 A 0;
		Goto SelectLoop;
	Deselect:
		WP01 E 0 A_JumpIfInventory("ShotgunCount",2,"DeselectLoop");
		WP01 C 0 A_JumpIfInventory("ShotgunCount",1,"DeselectLoop");
		WP01 A 0;
		Goto DeselectLoop;
	Ready: WP01 "#" 1 A_WeaponReady2(); Loop;
	Fire:
		WP01 B 1
		{
			If(CountInv("ShotgunCount") == 2) Return ResolveState("Reload");
			If(CountInv("ShotgunCount") == 1) Return ResolveState("FireRight");
			
			/*A_PlaySound("Shotgun",CHAN_WEAPON,2.0); 
			A_AlertMonsters();*/
			
			//A_FireBullets(7.5, 3.75, 10, (random(4,6)), "BulletPuff", FBF_NORANDOM, 0);
			A_ShotgunFire();
			A_GiveInventory("ShotgunCount",1); 
			A_TakeInventory("Shells",1,TIF_NOTAKEINFINITE);
			
			/*BloodyHandler.DoSwing(	Self, (frandom(-0.1, -0.075), frandom(0.175, 0.225)), 
									6, -1, 2, SWING_Spring, 1, 2);*/
			
			A_Overlay(-10, "LeftMuzzle");
			A_Overlay(50, "Glow1"); 
			A_Overlay(51, "Glow");
			A_GunFlash("Flash");
			
			A_SpawnItemEx("LightShotgun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0); 
			A_WeaponReady2(WRF_NOFIRE,15,8);
			Return ResolveState(null); 
		}
		WP01 B 1 A_WeaponReady2(WRF_DISABLE,18,11);
		WP01 B 1 A_WeaponReady2(WRF_DISABLE,19,12);
		WP01 C 1 A_WeaponReady2(WRF_DISABLE,18,11);
		WP01 C 1 A_WeaponReady2(WRF_DISABLE,15,8);
		WP01 C 1 A_WeaponReady2(WRF_DISABLE,8,4);
		WP01 C 1 A_WeaponReady2(WRF_DISABLE,4,3);
		WP01 C 1 A_WeaponReady2(WRF_DISABLE,3,2);
		WP01 C 1 A_WeaponReady2(WRF_NOSWITCH,2,1);
		WP01 C 1 
		{ 
			A_WeaponReady2(WRF_NOSWITCH);
			If(CountInv("ShotgunCount") < 2) A_ReFire("Fire");
			Else Return ResolveState("Reload");
			Return ResolveState(null); 
		}
		Goto Ready;
	FireRight:
		WP01 D 1
		{
			If(CountInv("ShotgunCount") == 2) Return ResolveState("Reload");
			
			/*A_PlaySound("Shotgun",CHAN_WEAPON,2.0); 
			A_AlertMonsters();*/
			
			//A_FireBullets(7.5, 3.75, 10, (random(4,6)), "BulletPuff", FBF_NORANDOM, 0);
			A_ShotgunFire();
			A_GiveInventory("ShotgunCount",1); 
			A_TakeInventory("Shells",1,TIF_NOTAKEINFINITE);
			
			/*BloodyHandler.DoSwing(	Self, (frandom(-0.1, -0.075), frandom(0.175, 0.225)), 
									6, -1, 2, SWING_Spring, 1, 2);*/
			
			A_Overlay(-10, "RightMuzzle");
			A_Overlay(50, "Glow2"); 
			A_Overlay(51, "Glow");
			A_GunFlash("Flash");
			
			A_SpawnItemEx("LightShotgun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0); 
			A_WeaponReady2(WRF_NOFIRE,15,8);
			Return ResolveState(null); 
		}
		WP01 D 1 A_WeaponReady2(WRF_DISABLE,18,11);
		WP01 D 1 A_WeaponReady2(WRF_DISABLE,19,12);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,18,11);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,15,8);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,8,4);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,4,3);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,3,2);
		WP01 E 1 A_WeaponReady2(WRF_NOSWITCH,2,1);
		WP01 E 1 
		{ 
			A_WeaponReady2(WRF_NOSWITCH);
			If(CountInv("ShotgunCount") < 2) { A_ReFire("Fire"); }
			Else { Return ResolveState("Reload"); }
			Return ResolveState(null); 
		}
		Goto Ready;
	AltFire:
		WP01 D 1
		{
			If(CountInv("Shells") == 1) { Return ResolveState("Fire"); }
			If(CountInv("ShotgunCount") == 2) { Return ResolveState("Reload"); }
			If(CountInv("ShotgunCount") == 1) { Return ResolveState("FireRight"); }
			
			/*A_PlaySound("ShotgunAlt",CHAN_WEAPON,2.0); 
			A_AlertMonsters();
			
			A_FireBullets(15, 7.5, 20, (random(4,6)), "BulletPuff", FBF_NORANDOM, 0);*/
			A_ShotgunFireAlt();
			A_GiveInventory("ShotgunCount",2); 
			A_TakeInventory("Shells",2,TIF_NOTAKEINFINITE);
			
			/*BloodyHandler.DoSwing(	Self, (frandom(-0.15, -0.125), frandom(0.25, 0.33)), 
									8, -1.5, 4, SWING_Spring, 1, 2);*/
			
			A_Overlay(-10, "BigMuzzle");
			A_Overlay(50, "Glow2"); 
			A_Overlay(51, "Glow");
			A_GunFlash("AltFlash");	
			
			A_SpawnItemEx("LightShotgun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0); 
			A_WeaponReady2(WRF_NOFIRE,15,8);
			Return ResolveState(null); 
		}
		WP01 D 1 A_WeaponReady2(WRF_DISABLE,18,11);
		WP01 D 1 A_WeaponReady2(WRF_DISABLE,21,14);
		WP01 D 1 A_WeaponReady2(WRF_DISABLE,22,15);
		WP01 D 1 A_WeaponReady2(WRF_DISABLE,21,14);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,18,11);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,15,5);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,8,3);
		WP01 E 1 A_WeaponReady2(WRF_DISABLE,4,2);
		Goto Reload;
	Reload:
		WP01 FF 1 A_WeaponReady2(WRF_DISABLE);
		WP01 G 1 { A_PlaySound("ShotgunReload",CHAN_AUTO,2.5); A_WeaponReady2(WRF_DISABLE); }
		WP01 H 1 A_WeaponReady2(WRF_DISABLE);
		SAWR F 0 A_FireProjectile("CasingSpawner3",0,0,0,0);
		SAWR F 0 A_FireProjectile("CasingSpawner3",0,0,6,0);
		WP01 IKLMNOPRSTU 1 A_WeaponReady2(WRF_DISABLE);
		TNT1 A 0 A_TakeInventory("ShotgunCount",2);
		Goto Ready;
	
	LeftMuzzle: SWFL AABBC 1 BRIGHT; Stop;
	RightMuzzle: SWFL DDEEF 1 BRIGHT; Stop;
	BigMuzzle: SWF2 AABBC 1 BRIGHT; Stop;
	Glow1: WP01 BBBCCCCCCCCCCCCCCCCCCCCCCCC 1 BRIGHT; Stop;
	Glow2: 
		WP01 DDDEEEEEE 1 BRIGHT;
		TNT1 A 0 A_JumpIf(CountInv("Shells") > 0, "Glow2Alt");
		WP01 EEEEEEEEEEEEEEEEE 1 BRIGHT;
		Stop;
	Glow2Alt:
		WP01 FFGHIKLMNOPQRSTUA 1 BRIGHT; 
		Stop;
	Glow:
		TNT1 A 1 BRIGHT
		{
			A_OverlayFlags(50, PSPF_RENDERSTYLE|PSPF_ALPHA, 1);
			A_OverlayRenderstyle(50, STYLE_Translucent);
			A_OverlayAlpha(50, 1.0);
		}
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.9);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.8);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.7);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.6);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.5);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.4);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.3);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.25);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.2);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.175);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.15);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.125);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.1);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.075);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.05);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.025);
		TNT1 A 1 BRIGHT A_OverlayAlpha(50, 0.01);
		Stop;
	Flash:
		TNT1 A 1 A_Light(6);
		TNT1 A 1 A_Light(4);
		TNT1 A 1 A_Light(2);
		TNT1 A 1 A_Light(1);
		Goto LightDone;
	AltFlash:
		TNT1 A 1 A_Light(8);
		TNT1 A 1 A_Light(6);
		TNT1 A 1 A_Light(4);
		TNT1 A 1 A_Light(3);
		TNT1 A 1 A_Light(2);
		TNT1 A 1 A_Light(1);
		Goto LightDone;
	}
	
	action void A_ShotgunFire()
	{
		A_QuakeEx(1,1,1,8,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:0.5);
		A_StartSound("Shotgun", CHAN_WEAPON, CHANF_OVERLAP);
		A_AlertMonsters();
		A_FireWeapon(random[Blood](4,6), 10, 0.08, 'Normal', -4);
	}
	
	action void A_ShotgunFireAlt()
	{
		A_QuakeEx(4,4,4,12,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:2);
		A_StartSound("ShotgunAlt", CHAN_WEAPON, CHANF_OVERLAP);
		A_AlertMonsters();
		A_FireWeapon(random[Blood](4,6), 20, 0.14, 'Normal', -4);
	}
}

Class ShotgunCount : Inventory { Default { Inventory.MaxAmount 2; } }

Class Shells : Ammo replaces Shell
{
	Default
	{
		Scale .65;
		Inventory.PickupMessage "Picked up a few shells.";
		inventory.pickupsound "GotAmmo";
		Inventory.Amount 4;
		Inventory.MaxAmount 100;
		Ammo.BackpackAmount 12;
		Ammo.BackpackMaxAmount 200;
		Inventory.Icon "SHLLA0";
		+DONTSPLASH
	}
	States
	{
	Spawn:
		SHLL A -1;
		Loop;
	}
}

Class LightShotgun : WeaponLight
{
	Default
	{
		WeaponLight.Setup 2, 16, 0.75, 4;
		args 255,224,128,120;
	}
}
Class LightShotgun2 : WeaponLight {}