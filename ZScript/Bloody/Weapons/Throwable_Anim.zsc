Extend Class BloodyThrowable
{
	ENum OverlayIDs
	{
		// Left side
		Left 			= 100,
		LeftFX1 		= 101,
		LeftFX2 		= 102,
		LeftFX3 		= 103,
		LeftFX4 		= 104,
		LeftGlow1 		= 105,
		LeftGlow2 		= 106,
		LeftGlow3 		= 107,
		LeftGlow4 		= 108,
		LeftFXGlow1		= 109,
		LeftFXGlow2		= 110,
		LeftFXGlow3		= 111,
		LeftFXGlow4		= 112,
		LeftFX5			= 113,
		LeftGlow5		= 114,
		LeftFXGlow5		= 115,
		LeftFX6			= 116,
		LeftGlow6		= 117,
		LeftFXGlow6		= 118,
		
		// Right side
		Right 			= 200,
		RightFX1 		= 201,
		RightFX2 		= 202,
		RightFX3 		= 203,
		RightFX4 		= 204,
		RightGlow1 		= 205,
		RightGlow2 		= 206,
		RightGlow3 		= 207,
		RightGlow4 		= 208,
		RightFXGlow1	= 209,
		RightFXGlow2	= 210,
		RightFXGlow3	= 211,
		RightFXGlow4	= 212,
	}
	
	// Common animations n' stuff
	States
	{
	Select: NULL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Raise(); Loop;
	Deselect: NULL A 12; NULL AAAAAAAAAAAAAAAA 0 A_Lower(); Wait;
	
	Ready: 
		NULL A 11 A_WeaponReady2(WRF_DISABLE);
		NULL A 0 A_Jump(256, "Idle");
		Stop;
	
	Lighter_Raise:
		TNTA A 0 OverlayOffset(Left, (-39, 48), 0);
		TNTA A 1 OverlayOffset(Left, (-39, 48), 0);
		TNTA A 1 OverlayOffset(Left, (-27, 36));
		TNTA A 1 OverlayOffset(Left, (-21, 28));
		TNTA A 1 OverlayOffset(Left, (-15, 20));
		TNTA B 1 { OverlayOffset(Left, (-9, 12)); A_StartSound("ZippoOpen", CHAN_WEAPON, CHANF_OVERLAP, 1.0, 2.0); }
		TNTA B 1 OverlayOffset(Left, (-3, 3));
		TNTA B 1 OverlayOffset(Left, (-2, 2));
		TNTA B 1 OverlayOffset(Left, (-1.5, 1.5));
		TNTA C 1 OverlayOffset(Left, (-1, 1));
		TNTA C 1 OverlayOffset(Left, (-0.5, 0.5));
		TNTA C 1 OverlayOffset(Left, (-0.25, 0.25));
		NULL A 0 { Overlay(LeftFX1, "Lighter_Spark"); A_StartSound("ZippoStrike", CHAN_WEAPON, CHANF_OVERLAP, 1.0, 2.0); }
	Lighter_Idle:
		TNTA D 1 A_JumpIf(CheckWater(), "Lighter_Lower");
		Loop;
	Lighter_Lower:
		TNTA L 1 { OverlayOffset(Left, (-3, 3)); Overlay(LeftFX2, "Lighter_Fire_Stop"); }
		TNTA L 1 OverlayOffset(Left, (-9, 12));
		TNTA M 1 OverlayOffset(Left, (-15, 20));
		TNTA M 1 OverlayOffset(Left, (-21, 28));
		TNTA N 1 OverlayOffset(Left, (-27, 36));
		TNTA N 1 OverlayOffset(Left, (-39, 48));
		Stop;
	
	Lighter_Move_Up:
		TNTA D 1 OverlayOffset(Left, (2, -1));
		TNTA D 1 OverlayOffset(Left, (4, -2));
		TNTA D 1 OverlayOffset(Left, (8, -4));
		TNTA D 1 OverlayOffset(Left, (12, -6));
		TNTA D 1 OverlayOffset(Left, (14, -7));
		TNTA D 1 OverlayOffset(Left, (16, -8));
		TNTA D 1 OverlayOffset(Left, (17, -8.5));
		TNTA D 1 OverlayOffset(Left, (18, -9));
		TNTA D 1 OverlayOffset(Left, (19, -9.5));
		TNTA D 1 OverlayOffset(Left, (20, -10));
	Lighter_Move_Down:
		TNTA D 1 OverlayOffset(Left, (20, -10));
		TNTA D 1 OverlayOffset(Left, (18, -8));
		TNTA D 1 OverlayOffset(Left, (12, -2));
		TNTA D 1 OverlayOffset(Left, (4, 6));
		TNTA D 1 OverlayOffset(Left, (-2, 16));
		TNTA D 1 OverlayOffset(Left, (-8, 24));
		TNTA D 1 OverlayOffset(Left, (-10, 30));
		TNTA D 1 OverlayOffset(Left, (-12, 34));
		TNTA D 1 OverlayOffset(Left, (-13, 36));
		TNTA D 1 OverlayOffset(Left, (-13.5, 38));
	Lighter_Hold_Down:
		TNTA D 0 A_JumpIf(CheckWater(), "Lighter_Hold_Lower");
		TNTA D 1 OverlayOffset(Left, (-14, 40));
		Loop;
	Lighter_Move_Reset:
		TNTA D 1 OverlayOffset(Left, (-14, 40)); //OverlayOffset(Left, (-39, 48));
		TNTA D 1 OverlayOffset(Left, (-11, 36));
		TNTA D 1 OverlayOffset(Left, (-9, 28));
		TNTA D 1 OverlayOffset(Left, (-7, 20));
		TNTA D 1 OverlayOffset(Left, (-5, 12));
		TNTA D 1 OverlayOffset(Left, (-3, 3));
		Goto Lighter_Idle;
	Lighter_Hold_Lower:
		TNTA L 1 OverlayOffset(Left, (-17, 43));
		TNTA L 1 OverlayOffset(Left, (-23, 52));
		TNTA M 1 OverlayOffset(Left, (-29, 60));
		TNTA M 1 OverlayOffset(Left, (-35, 68));
		TNTA N 1 OverlayOffset(Left, (-41, 76));
		TNTA N 1 OverlayOffset(Left, (-53, 88));
		Stop;
		/*TNTA D 1 OverlayOffset(Left, (20, -10));
		TNTA D 1 OverlayOffset(Left, (18, -9));
		TNTA D 1 OverlayOffset(Left, (16, -8));
		TNTA D 1 OverlayOffset(Left, (12, -6));
		TNTA D 1 OverlayOffset(Left, (4, -2));
		TNTA D 0 OverlayOffset(Left, (0, 0));
		Goto Lighter_Idle;*/
		
	Lighter_Spark:
		TNTA E 0 Overlay(LeftFX2, "Lighter_Fire");
		TNTA E 1 BRIGHT A_OverlayAlpha(LeftFX1, 1.);
		TNTA E 1 BRIGHT A_OverlayAlpha(LeftFX1, .75);
		TNTA E 1 BRIGHT A_OverlayAlpha(LeftFX1, .5);
		TNTA E 1 BRIGHT A_OverlayAlpha(LeftFX1, .25);
		Stop;
	Lighter_Fire:
		TNTA FFFGGG 1 BRIGHT 		{ If(Random[Blood](0, 255) < 156) Overlay(LeftGlow1, "Lighter_Glow", frandom[Blood](.05, .25)); If(CheckWater()) ClearOverlay(LeftFX2); }
		TNTA HHHIIIJJJKKK 1 BRIGHT	{ If(Random[Blood](0, 255) < 156) Overlay(LeftGlow1, "Lighter_Glow", frandom[Blood](.05, .25)); If(CheckWater()) ClearOverlay(LeftFX2); }
		Goto Lighter_Fire+6;
	Lighter_Fire_Stop:
		TNTA G 1 BRIGHT { A_OverlayAlpha(LeftFX2, .84); If(CheckWater()) ClearOverlay(LeftFX2); }
		TNTA G 1 BRIGHT { A_OverlayAlpha(LeftFX2, .68); If(CheckWater()) ClearOverlay(LeftFX2); }
		TNTA G 1 BRIGHT { A_OverlayAlpha(LeftFX2, .52); If(CheckWater()) ClearOverlay(LeftFX2); }
		TNTA F 1 BRIGHT { A_OverlayAlpha(LeftFX2, .36); If(CheckWater()) ClearOverlay(LeftFX2); }
		TNTA F 1 BRIGHT { A_OverlayAlpha(LeftFX2, .20); If(CheckWater()) ClearOverlay(LeftFX2); }
		TNTA F 1 BRIGHT { A_OverlayAlpha(LeftFX2, .04); If(CheckWater()) ClearOverlay(LeftFX2); }
		Stop;
	Lighter_Glow:
		TNTA D 1 BRIGHT;
		Stop;
	
	ReleaseTheButton:
		TNTC C 0 
		{ 
			A_StopSound(CHAN_WEAPON);
			Actor x = Invoker.Owner.Spawn("DynamiteExplosion", Invoker.Owner.Pos + (0, 0, Invoker.Owner.Player.ViewHeight));
			If(x) x.Target = Invoker.Owner;
			Invoker.Owner.DamageMObj(Invoker.Owner, Invoker.Owner, 42069, 'Explosive', DMG_FORCED|DMG_THRUSTLESS, 0); 
		}
		TNTC C 0 
		{
			For(int i = 100; i < 300; i++) ClearOverlay(i);
			Overlay(Left, "ReleaseTheButtonLeft");
			Invoker.Timer = 0;
			A_SetInventory("ThrowableForce", 0);
		}
		TNTC C 1 A_WeaponReady2(WRF_DISABLE);
		TNTC C 1 A_WeaponReady2(WRF_DISABLE, 56, -16);
		TNTC C 1 A_WeaponReady2(WRF_DISABLE, 112, -32);
		TNTC C 1 A_WeaponReady2(WRF_DISABLE, 168, -64);
		TNTC C 0 
		{
			A_GiveInventory("BloodyThrowable_Holstered", 1);
			A_SelectWeapon("BloodyThrowable_Holstered");
		}
		Stop;
	ReleaseTheButtonLeft:
		TNTC D 1 OverlayOffset(Left, (0, 0));
		TNTC D 1 OverlayOffset(Left, (-56, -16));
		TNTC D 1 OverlayOffset(Left, (-112, -32));
		TNTC D 1 OverlayOffset(Left, (-168, -64));
		Stop;
	
	Throw:
		TNTC A 0;
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 56, 60);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 44, 52);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 32, 40);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 26, 32);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 20, 24);
		TNTC B 0;
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 14, 16);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 8, 10);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 4, 6);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 2, 4);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 1, 3);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 0, 2);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 1, 3);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 2, 4);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 4, 6);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 8, 10);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 14, 16);
		TNTC A 0;
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 20, 24);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 26, 32);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 32, 40);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 44, 52);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 56, 60);
		"####" "#" 0 A_Jump(256, "BringBack");
		Stop;
	
	BringBack_Raise:
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 39, 48);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 27, 36);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 21, 28);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 15, 20);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 9, 12);
		"####" "#" 1 A_WeaponReady2(WRF_DISABLE, 3, 3);
		"####" "#" 0 A_Jump(256, "Ready");
		Goto Ready;
	SelectWater:
		TNT1 A 0 A_GiveInventory("DynamiteHolster", 1);
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Raise();
		Wait;
	Holster:
		TNT1 A 6 A_GiveInventory("DynamiteHolster", 1);
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		Goto Holster+1;
	HolsterDeselect:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Lower();
		TNT1 A 0 A_TakeInventory("DynamiteHolster", 1);
		Goto DeselectLoop+9;
	
	ClearLayer: TNT1 A 1; Stop;
	}
}

Class DynamiteHolster : inventory { Default { Inventory.MaxAmount 1; } }

Class DynamiteExplosion : Actor
{
	Default { +NOINTERACTION }
	States
	{
	Spawn:
		TNT1 A 5 NoDelay
		{
			A_RemoveMaster(RMVF_EVERYTHING);
			
			Let l = Spawn("DynamiteHitLight", Self.Pos);
			l.Master = Self;
			
			A_SpawnItemEx("DynamiteExplosionFX", flags: SXF_NOCHECKPOSITION);
			A_SpawnItemEx("DynamiteExplosionFX", flags: SXF_NOCHECKPOSITION);
			
			For(int i = 0; i < 6; i++)
			{
				A_SpawnItemEx("DynamiteExplosionAdd", 0, 0, 0, frandom(-2, 2), 0, frandom(-2, 2), frandom(0, 359), SXF_NOCHECKPOSITION);
				For(int a = 0; a < 2; a++) 
					A_SpawnItemEx("DynamiteShockwave", flags: SXF_NOCHECKPOSITION);
			}
			
			A_StartSound("DynamiteHit", CHAN_WEAPON, CHANF_OVERLAP, 1.0, 0.5);
			A_AlertMonsters();
			A_Stop();
			
			For(int i = 0; i < 24; i++)
			{
				A_SpawnItemEx("DynamiteSmoke", 0,0,0, frandom[Rocket](-0.33, 0.33), 0, frandom[Rocket](-0.33, 0.33), frandom[Rocket](0, 359), SXF_NOCHECKPOSITION, 8);
			}
			
			/*For(int a = 0; a < 100; a++)
			{ 
				A_SpawnParticle(DukeHandler.ColorPicker(0xffff73, 0xffde00, random[Rocket](1, 255), 1, 4),
								SPF_FULLBRIGHT|SPF_RELATIVE,50,frandom(4,10),frandom(0,359),0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,8),0,0,-0.275,1.0,0.02,0.05); 
			}*/
			
			Actor x = Spawn("DynamiteExplosionDamage", Self.Pos);
			If(x) x.Target = Target;
		}
		Stop;
	}
}

Class DynamiteExplosionDamage : SplashFunc
{
	Default
	{
		DamageType "Explosive";
		SplashFunc.Setup 160, 156, 10, True;
		SplashFunc.Multipliers .8, True;
	}
}

Class DynamiteMIRVDamage : SplashFunc
{
	Default
	{
		DamageType "Explosive";
		SplashFunc.Setup 40, 128, 10, True;
		SplashFunc.Multipliers .5, True;
	}
}

Class DynamiteSmoke : SmokeFX
{
	Default
	{
		Alpha 0.25;
		Scale 0.3;
		SmokeFX.Changer 0.018, 0.005, 70;
		Renderstyle "Translucent";
		//Translation "0:255=%[0.00,0.00,0.00]:[0.5,0.5,0.5]";
	}
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetShade("FFFFFF");
	}
}

Class DynamiteShockwave : ShockwaveBase
{
	Default { Scale 0.7; Args 67, 1500, 0, 0; }
	States
	{
	Spawn:
		E5_A A 1 BRIGHT
		{
			A_FadeOut(0.067, 1);
			Scale.X *= 1.15; Scale.Y = Scale.X;
		}
		Wait;
	}
}

Class DynamiteExplosionFX : ExplosionFX5 { Default { Scale 1.33; } }
Class DynamiteExplosionAdd : ExplosionFX1 { Default { Scale 1.5; } }

Class DynamiteMIRVExplosion : Actor
{
	Default { +NOINTERACTION }
	States
	{
	Spawn:
		TNT1 A 5 NoDelay
		{
			A_RemoveMaster(RMVF_EVERYTHING);
			
			Let l = Spawn("DynamiteMIRVHitLight", Self.Pos);
			l.Master = Self;
			
			A_SpawnItemEx("DynamiteMIRVExplosionFX", flags: SXF_NOCHECKPOSITION);
			A_SpawnItemEx("DynamiteMIRVExplosionFX", flags: SXF_NOCHECKPOSITION);
			
			For(int a = 0; a < 2; a++) 
				A_SpawnItemEx("DynamiteMIRVShockwave", flags: SXF_NOCHECKPOSITION);
			
			A_StartSound("DynamiteMIRVHit", CHAN_WEAPON, CHANF_OVERLAP, 1.0, 0.5);
			A_AlertMonsters();
			A_Stop();
			
			For(int i = 0; i < 4; i++)
				A_SpawnItemEx("DynamiteMIRVSmoke", 0,0,0, frandom[Rocket](-0.33, 0.33), 0, frandom[Rocket](-0.33, 0.33), frandom[Rocket](0, 359), SXF_NOCHECKPOSITION, 8);
			
			Actor x = Spawn("DynamiteMIRVDamage", Self.Pos);
			If(x) x.Target = Target;
		}
		Stop;
	}
}

Class DynamiteMIRVExplosionFX : ExplosionFX3 { Default { Scale 0.6; } }
Class DynamiteMIRVShockwave : DynamiteShockwave { Default { Scale 0.3; } }
Class DynamiteMIRVSmoke : DynamiteSmoke { Default { Scale 0.15; SmokeFX.Changer 0.018, 0.005, 70; } }

Class DynamiteLight : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,128,48;
	}
	
	Override void Tick()
	{
		Super.Tick();
		If(!Master) { Destroy(); Return; }
		SetOrigin(Master.Pos,true);
		If(IsFrozen()) Return;
		args[LIGHT_INTENSITY] = 56 * frandom(0.95,1.05);
	}
}

Class DynamiteHitLight : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,128,64;
	}
	override void Tick()
	{
		Super.Tick();
		If(master) SetOrigin(master.pos,true);
		If(IsFrozen()) Return;
		args[LIGHT_INTENSITY] += (12 - cnt);
		If(cnt > 8)
		{
			args[LIGHT_RED] *= 0.8;
			args[LIGHT_GREEN] *= 0.8;
			args[LIGHT_BLUE] *= 0.8;
		}
		If(cnt++ > 35) Destroy();
	}
}

Class DynamiteMIRVHitLight : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,128,32;
	}
	override void Tick()
	{
		Super.Tick();
		If(master) SetOrigin(master.pos,true);
		If(IsFrozen()) Return;
		args[LIGHT_INTENSITY] += (6 - cnt);
		If(cnt > 8)
		{
			args[LIGHT_RED] *= 0.8;
			args[LIGHT_GREEN] *= 0.8;
			args[LIGHT_BLUE] *= 0.8;
		}
		If(cnt++ > 35) Destroy();
	}
}