Class Incinerator : BloodWeapon replaces RocketLauncher
{
	Default
	{
		Tag "Napalm Launcher";
		Inventory.PickupMessage "Picked up a Napalm Launcher.";
		Obituary "%o was incinerated by %k's Napalm Launcher.";
		Weapon.SlotNumber 5;
		Weapon.SelectionOrder 5;
		Weapon.AmmoType "Napalm";
		Weapon.AmmoType2 "Napalm";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 5;
		Weapon.AmmoUse2 1;
		Scale 0.7;
		Weapon.SisterWeapon "AkIncinerator";
	}
	States
	{
	Spawn: NAPL H 0; Goto SpawnLoop;
	Select: NAPL A 0 { 	A_Overlay(100,"NapalmFX"); 
						A_OverlayFlags(100,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
						A_OverlayRenderStyle(100,STYLE_TRANSLUCENT);
					 } 	Goto SelectLoop;
	Deselect: NAPL A 0 { A_Overlay(100,"StopOverlay"); A_Overlay(101,"StopOverlay"); A_Overlay(102,"StopOverlay"); A_Overlay(103,"StopOverlay"); A_Overlay(104,"StopOverlay"); } Goto DeselectLoop;
	Ready: NAPL A 1 A_WeaponReady2(); Loop;
	Fire:
		NAPL A 1 BRIGHT
		{
			A_PlaySound("NapalmLauncher",CHAN_WEAPON,2.78); A_AlertMonsters();
			
			A_FireProjectile("NapalmBall",0,0,0,-2,4,0);
			
			//BloodyHandler.DoSwing(Self, (frandom(-0.05, -0.075), frandom(0.1, 0.125)), 8, -2, 4, SWING_Spring, 1, 2);
			
			A_Overlay(-10, "Muzzle"); A_WeaponReady2(WRF_DISABLE,12,12);	
			A_OverlayFlags(-10,PSPF_ADDBOB|PSPF_ADDWEAPON,1);
			
			A_Overlay(69,"NapalmAdd"); A_OverlayFlags(69,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
			A_OverlayRenderStyle(69,STYLE_TRANSLUCENT);
			
			A_TakeInventory("Napalm",1,TIF_NOTAKEINFINITE); A_GunFlash("Flash");
			A_SpawnItemEx("LightNapalm",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0); 
		}
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,16,16);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,18,18);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,19,19);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,20,20);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,21,21);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,20,20);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,19,19);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,18,18);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,16,16);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,12,12);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,8,8);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,6,6);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,4,4);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,3,3);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,2,2);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,1,1);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,0.5,0.5);
		NAPL A 1 { A_WeaponReady2(WRF_NOSWITCH); A_ReFire("Fire"); }
		Goto Ready;
		
	AltFire:
		NAPL A 1 BRIGHT
		{
			If(CountInv("Napalm") > 0 && CountInv("Napalm") < 12) { Return ResolveState("Fire"); }
			If(CountInv("Napalm") == 0) { Return ResolveState("Reselect"); }
			
			A_PlaySound("NapalmLauncherAlt",CHAN_WEAPON,2.78); A_AlertMonsters();
			
			A_FireProjectile("NapalmBallAlt",0,0,0,-2,4,0);
			
			BloodyHandler.DoSwing(Self, (frandom(-0.05, -0.075), frandom(0.2, 0.25)), 8, -1, 7, SWING_Spring, 1, 2);
			
			A_Overlay(-10, "Muzzle"); A_WeaponReady2(WRF_DISABLE,12,12);	
			A_OverlayFlags(-10,PSPF_ADDBOB|PSPF_ADDWEAPON,1);
			
			A_Overlay(69,"NapalmAdd"); A_OverlayFlags(69,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
			A_OverlayRenderStyle(69,STYLE_TRANSLUCENT);
			
			A_TakeInventory("Napalm",12,TIF_NOTAKEINFINITE); A_GunFlash("Flash");
			A_SpawnItemEx("LightNapalm2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0); 
			
			Return ResolveState(Null);
		}
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,18,18);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,22,22);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,24,24);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,25,25);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,26,26);
		NAPL AA 1 A_WeaponReady2(WRF_DISABLE,26.5,26.5);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,26,26);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,25,25);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,24,24);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,22,22);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,18,18);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,12,12);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,8,8);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,6,6);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,4,4);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,3,3);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,2,2);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,1,1);
		NAPL A 1 A_WeaponReady2(WRF_DISABLE,0.5,0.5);
		NAPL A 1 { A_WeaponReady2(WRF_NOSWITCH); A_ReFire("AltFire"); }
		Goto Ready;
		
	Flash:
		TNT1 A 1 A_Light(8);
		TNT1 A 1 A_Light(6);
		TNT1 A 1 A_Light(4);
		TNT1 A 1 A_Light(3);
		TNT1 A 1 A_Light(2);
		TNT1 A 1 A_Light(1);
		Goto LightDone;
	Recoil:
		TNT1 A 1 A_SetPitch(Pitch + 1, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch + 0.5, SPF_INTERPOLATE);
		TNT1 AAA 1 A_SetPitch(Pitch - 0.5, SPF_INTERPOLATE);
		Stop;
	Recoil2:
		TNT1 A 1 A_SetPitch(Pitch + 2, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch + 1, SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch + 0.5, SPF_INTERPOLATE);
		TNT1 AAAAAAA 1 A_SetPitch(Pitch - 0.5, SPF_INTERPOLATE);
		Stop;
	
	Muzzle:
		NAPF ABCDEFGHIJK 1 BRIGHT;
		Stop;
	NapalmAdd:
		NAPL BBBB 1 BRIGHT;
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.9);
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.7);
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.6);
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.5);
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.4);
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.3);
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.2);
		NAPL B 1 BRIGHT A_OverlayAlpha(69,0.1);
		Stop;
	
	NapalmFX:
		NAPL CC 1 BRIGHT;
		NAPL C 1 BRIGHT
		{
			A_Overlay(101,"NapalmFX2");
			A_OverlayFlags(101,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
			A_OverlayRenderStyle(101,STYLE_TRANSLUCENT);
		}
		NAPL C 1 BRIGHT;
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.9);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.8);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.7);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.6);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.5);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.4);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.3);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.2);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.1);
		NAPL C 1 BRIGHT A_OverlayAlpha(100,0.05);
		Stop;
	NapalmFX2:
		NAPL DD 1 BRIGHT;
		NAPL D 1 BRIGHT
		{
			A_Overlay(102,"NapalmFX3");
			A_OverlayFlags(102,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
			A_OverlayRenderStyle(102,STYLE_TRANSLUCENT);
		}
		NAPL D 1 BRIGHT;
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.9);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.8);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.7);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.6);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.5);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.4);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.3);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.2);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.1);
		NAPL D 1 BRIGHT A_OverlayAlpha(101,0.05);
		Stop;
	NapalmFX3:
		NAPL EE 1 BRIGHT;
		NAPL E 1 BRIGHT
		{
			A_Overlay(103,"NapalmFX4");
			A_OverlayFlags(103,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
			A_OverlayRenderStyle(103,STYLE_TRANSLUCENT);
		}
		NAPL E 1 BRIGHT;
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.9);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.8);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.7);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.6);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.5);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.4);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.3);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.2);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.1);
		NAPL E 1 BRIGHT A_OverlayAlpha(102,0.05);
		Stop;
	NapalmFX4:
		NAPL FF 1 BRIGHT;
		NAPL F 1 BRIGHT
		{
			A_Overlay(104,"NapalmFX5");
			A_OverlayFlags(104,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
			A_OverlayRenderStyle(104,STYLE_TRANSLUCENT);
		}
		NAPL F 1 BRIGHT;
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.9);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.8);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.7);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.6);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.5);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.4);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.3);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.2);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.1);
		NAPL F 1 BRIGHT A_OverlayAlpha(103,0.05);
		Stop;
	NapalmFX5:
		NAPL GGGGG 1 BRIGHT;
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.9);
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.8);
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.7);
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.6);
		NAPL G 1 BRIGHT
		{
			A_Overlay(100,"NapalmFX");
			A_OverlayFlags(100,PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_RENDERSTYLE|PSPF_ALPHA,1);
			A_OverlayRenderStyle(100,STYLE_TRANSLUCENT);
			A_OverlayAlpha(104,0.5);
		}
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.4);
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.3);
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.2);
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.1);
		NAPL G 1 BRIGHT A_OverlayAlpha(104,0.05);
		Stop;
	}
}

Class Napalm : Ammo replaces RocketBox
{
	Default
	{
		Inventory.PickupMessage "Picked up a Gasoline Can";
		Inventory.PickupSound "GotAmmo";
		Inventory.Amount 5;
		Inventory.MaxAmount 100;
		Ammo.BackpackAmount 5;
		Ammo.BackpackMaxAmount 150;
		Inventory.Icon "NAPLI0";
		Scale 0.7;
	}
	
	bool RotDir;
	Override void PostBeginPlay()
	{
		Angle = frandom[Blood](0, 359);
		RotDir = random[Blood](0, 1);
	}
	
	States
	{
	Spawn:
		NAPL I 1 NoDelay A_Turn(bDROPPED ? Invoker.RotDir ? -4. : 4. : 0);
		Loop;
	}
}

Class NapalmDebrisLight : Nothing {}

Class NapalmBall : FastProjectile
{
	Default
	{
		PROJECTILE;
		+EXTREMEDEATH
		+NODAMAGETHRUST
		+BLOODLESSIMPACT
		+HITTRACER
		Speed 48;
		DamageFunction 0;
		DamageType "Fire";
		Scale 0.55;
		Radius 4;
		Height 8;
		MissileType "NapalmTrailer";
		MissileHeight 8;
		RenderStyle "Translucent";
		Alpha 0.95;
		Decal "Scorch";
		ActiveSound "SprayFire";
		ReactionTime 128;
	} int Cycles;
	States
	{
	Spawn:
		NAPB A 0 NoDelay 
		{
			A_StartSound("SprayFire", CHAN_BODY, CHANF_LOOP, 1.0, 1.5);
			A_SpawnItemEx("NapalmBallLight", flags: SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER);
		}
		NAPB ABCDEF 4 BRIGHT;
		Goto Spawn+1;
	Death:
		TNT1 A 35
		{
			If(Tracer && Tracer.Default.bNORADIUSDMG) Tracer.DamageMObj(Self, Target, random[Blood](69, 71), 'Fire', DMG_THRUSTLESS, 0);
			A_RemoveChildren(1, RMVF_EVERYTHING, "", "NapalmBallLight");
			A_StopSound(CHAN_BODY);
			A_Stop();
			A_StartSound("NapalmHit", CHAN_WEAPON, CHANF_OVERLAP, 1.0, 0.8);
			A_SpawnItemEx("LightNapalmHit", flags: SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER);
			A_SpawnItemEx("NapalmExplosion", flags: SXF_NOCHECKPOSITION);
			
			For(int i = 0; i != 6; i++)
			{
				A_SpawnItemEx("NapalmExplosionAdd",frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-4,4),frandom(-4,4),frandom(-4,4),frandom(0,359),SXF_NOCHECKPOSITION,0);
				
				//For(int a = 0; a != 12; a++)
					//A_SpawnItemEx("NapalmFireFX",frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-8,2),frandom(0,359),SXF_NOCHECKPOSITION,8);
				
				A_SpawnItemEx("NapalmShockwave",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
				A_SpawnItemEx("NapalmSmoker",frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3),0,SXF_NOCHECKPOSITION,0);
				A_SpawnItemEx("NapalmDebris",0,0,0,frandom(-16,16),frandom(-16,16),frandom(-16,32),frandom(0,359),SXF_NOCHECKPOSITION,64);
				A_SpawnItemEx("NapalmDebris",0,0,0,frandom(-16,16),frandom(-16,16),frandom(-16,32),frandom(0,359),SXF_NOCHECKPOSITION,192);
			}
			
			Actor x = Spawn("NapalmExplosionDamage", Self.Pos);
			If(x) x.Target = Target;
		}
		Stop;
	}
}

Class NapalmExplosionDamage : SplashFunc
{
	Default
	{
		DamageType "Fire";
		SplashFunc.Setup 112, 192, 10, True;
	}
	
	bool doneburn;
	Override void Tick()
	{
		Super.Tick();
		If(!IsFrozen() && !Done) 
		{	
			If(DoomExp && DoneBurn) Return;
			ThinkerIterator z = ThinkerIterator.Create();
			Actor mo;
			While(mo = Actor(z.Next()))
			{
				If(	!mo || !mo.bSOLID || !mo.bSHOOTABLE || (!mo.Player && !mo.bISMONSTER) ||
					mo.Distance3D(Self) > ERad || !mo.CheckSight(Self,SF_IGNOREVISIBILITY))
						Continue;
					
				If(mo && mo.bSOLID && mo.bSHOOTABLE && mo.Distance3D(Self) <= ERad)
				{
					If(mo.CheckSight(Self, SF_IGNOREVISIBILITY) && mo.Distance3D(Self) <= DoomExp ? ERad : CurSize)
					{
						int burn = randompick[Blood](7, 14, 21);
						burn *= DoomExp ? ETime : 1;
						Class<Inventory> cls = "BurnDOT";
						Inventory Item = mo.FindInventory(cls);
						
						If(item && item.amount < item.maxamount)
						{
							Item.Amount += Min(Burn, item.maxamount - burn);
							If(Item.Amount >= Item.MaxAmount) Item.Amount = Item.MaxAmount;
							If(Item.Master != Target) Item.Master = Target;
						}
						
						Else
						{
							item = mo.GiveInventoryType("BurnDOT");
							If(item)
							{
								item.Amount += Min(Burn, item.maxamount - burn);
								item.Master = Target;
							}
						}
					}
				}
			}
			If(DoomExp) DoneBurn = True;
		}
	}
}

Class NapalmSmoker : SmokeFX
{
	Default
	{
		Alpha 0.5;
		Scale 0.2;
		SmokeFX.Changer 0.027, 0.005, 50;
		Renderstyle "Translucent";
		//Translation "0:255=%[0.00,0.00,0.00]:[0.5,0.5,0.5]";
	}
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetShade("000000");
	}
}

Class NapalmTrailer : Actor
{
	Default { +NOINTERACTION }
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SpawnItemEx("NapalmTrail",-8,0,0,frandom(-0.33,-0.033),frandom(-0.033,0.033),frandom(-0.033,0.033),0,SXF_NOCHECKPOSITION,192);
			A_SpawnItemEx("NapalmTrail",-8,0,0,frandom(-0.33,-0.033),frandom(-0.033,0.033),frandom(-0.033,0.033),0,SXF_NOCHECKPOSITION,128);
			A_SpawnItemEx("NapalmFireFX",-8,0,0,frandom(-0.4,0),frandom(-0.4,0.4),frandom(0.2,1),0,SXF_NOCHECKPOSITION,192);
			For(int i = 0; i != 3; i++)
			{
				If(Random(0,9) >= 4)
				{
					If(Random(0,1) == 1) { A_SpawnParticle("Yellow",SPF_RELATIVE|SPF_FULLBRIGHT,random(35,70),frandom(2,4),0,-8,0,0,frandom(0,-2),frandom(-2,2),frandom(-0.5,2),0,0,frandom(-0.3,0),1.0,-1,0); }
					Else { A_SpawnParticle("Orange",SPF_RELATIVE|SPF_FULLBRIGHT,random(35,70),frandom(2,4),0,-8,0,0,frandom(0,-2),frandom(-2,2),frandom(-0.5,2),0,0,frandom(-0.3,0),1.0,-1,0); }
				}
			}
		}
		Stop;
	}
}

Class NapalmTrail : SmokeFX
{
	Default
	{
		Alpha 0.35;
		Scale 0.2;
		SmokeFX.Changer 0.01, 0.01, 105;
		Renderstyle "Translucent";
		//Translation "0:255=%[0.00,0.00,0.00]:[0.5,0.5,0.5]";
	}
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		SetShade("000000");
	}
}

/*
Class NapalmTrail : Actor
{
	Default
	{
		+FORCEXYBILLBOARD
		+NOINTERACTION
		+ROLLSPRITE
		Scale 0.33;
		RenderStyle "Add";
		Alpha 0.67;
		Translation "0:255=%[0.00,0.00,0.00]:[2.00,2.00,2.00]";
	}
	
	Override Void PostBeginPlay() { Super.PostBeginPlay(); A_SetRoll(frandom(0,359)); bSPRITEFLIP = Random(0,1); }
	
	States
	{
	Spawn:
		SMEK AAABBBCCCDDDEEEFFFGGGHHHIII 1 NoDelay { Scale.X += 0.01; Scale.Y += 0.01; A_FadeOut(0.05,1); }
		Wait;
	}
}*/

Class NapalmExplosion : ExplosionFX5
{
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		For(int i = 0; i != 50; i++)
		{
			If(Random(0,1) == 1) { A_SpawnParticle("Yellow",SPF_FULLBRIGHT|SPF_RELATIVE,70,frandom(8,10),frandom(0,359),0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,8),0,0,-0.4,1.0,-1,0); }
			Else { A_SpawnParticle("Orange",SPF_FULLBRIGHT|SPF_RELATIVE,70,frandom(8,10),frandom(0,359),0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,8),0,0,-0.4,1.0,-1,0); }
		}
	}
}

Class NapalmExplosionAdd : ExplosionAddBase
{
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		bROLLSPRITE = True;
		Roll = frandom(0, 359);
	}
}

Class NapalmFireFX : FireFX 
{
	Default { VSpeed 0.1; }
	States
	{
	Spawn:
		FDOT AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH 1 BRIGHT 
		{
			Vel.X *= frandom(0.95,0.975);
			Vel.Y *= frandom(0.95,0.975);
			If(Vel.Z < 0) { Vel.Z *= frandom(0.9,0.95); }
			If(Vel.Z == 0) { Vel.Z += frandom(0.01,0.015); }
			If(Vel.Z > 0) { Vel.Z *= frandom(1,1.0125); }
		}
		FDOT H 1 BRIGHT 
		{ 
			A_FadeOut(0.1,1); 
			Vel.X *= frandom(0.95,0.975);
			Vel.Y *= frandom(0.95,0.975);
			If(Vel.Z < 0) { Vel.Z *= frandom(0.9,0.95); }
			If(Vel.Z == 0) { Vel.Z += frandom(0.01,0.015); }
			If(Vel.Z > 0) { Vel.Z *= frandom(1,1.0125); }
		}
		Wait;
	}
}

Class NapalmShockwave : ShockwaveBase
{
	Default { Scale 1.25; }
	States
	{
	Spawn:
		NAPX W 0;
		Goto Super::Spawn;
	}
}

Class NapalmDebris : Actor
{
	Default
	{
		PROJECTILE;
		+RIPPER
		+BLOODLESSIMPACT
		-NOGRAVITY
		DamageFunction (0);
		Radius 1;
		Height 1;
		//Gravity 0.75;
	} int ticker;
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SpawnItemEx("NapalmDebrisLight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ORIGINATOR,0);
	}
	
	States
	{
	Spawn:
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 NoDelay 
		{
			A_SpawnItemEx("FireFX",0,0,0,frandom(-0.5,0),frandom(-0.5,0.5),frandom(0,0.5),0,SXF_NOCHECKPOSITION,16);
			A_SpawnItemEx("FireFX",0,0,0,frandom(-0.5,0),frandom(-0.5,0.5),frandom(0,0.5),0,SXF_NOCHECKPOSITION,128);
		}
		Stop;
	Death:
		TNT1 A 1 
		{
			If(Self.Pos.Z == Self.FloorZ) A_SpawnItemEx("GroundedFire",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32);
		}
		Stop;
	}
}

Class NapalmBallAlt : Actor
{
	Default
	{
		PROJECTILE;
		+NOEXTREMEDEATH
		+NODAMAGETHRUST
		+BOUNCEONWALLS
		//+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+CANBOUNCEWATER
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+DONTSPLASH
		+DONTGIB
		+NOBOUNCESOUND
		-NOGRAVITY
		BounceCount 2;
		BounceFactor 0.5;
		WallBounceFactor 0.5;
		Speed 36;
		DamageFunction (random(49,51));
		DamageType "Fire";
		Scale 0.6;
		Radius 4;
		Height 8;
		Gravity 0.8;
		Decal "Scorch";
		ActiveSound "SprayFire";
	} int Cycles;
	States
	{
	Spawn:
		NAPB A 0 NoDelay 
		{
			A_PlaySound("SprayFire",CHAN_BODY,1.0,1);
			A_SpawnItemEx("NapalmBallLight2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER,0);
			A_SpawnItemEx("NapalmBallGlow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER,0);
		}
		NAPB AAAABBBBCCCCDDDDEEEEFFFF 1 BRIGHT A_SpawnItemEx("NapalmTrailer",0,0,8,0,0,0,0,SXF_NOCHECKPOSITION,0);
		Goto Spawn+1;
	Death:
		TNT1 A 0
		{
			A_Explode((random(29,31)),192,1,1,0,0,0,"Nothing","RadiusFire");
			A_RemoveChildren(1,RMVF_EVERYTHING,"","NapalmBallLight2");
			A_RemoveChildren(1,RMVF_EVERYTHING,"","NapalmBallGlow");
			A_StopSound(CHAN_VOICE);
			A_PlaySound("NapalmDivide",CHAN_WEAPON,2.78);
			A_RadiusGive("BurnDOT",192,RGF_PLAYERS|RGF_MONSTERS,random(69,71));
			
			A_SpawnItemEx("LightNapalmHit2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER,0);
			
			A_QuakeEx(7,7,7,24,0,512,"Blank",QF_RELATIVE|QF_SCALEDOWN|QF_WAVE,0,0,0,256,0,1.5*randompick(-1,1),frandom(5.5,8.5)); A_Stop();
			
			A_SpawnItemEx("NapalmExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			
			For(int i = 0; i != 6; i++)
			{
				For(int a = 0; a != 18; a++)
				{
					A_SpawnItemEx("NapalmFireFX",frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-4,4),frandom(-4,4),frandom(-4,4),frandom(0,359),SXF_NOCHECKPOSITION,0);
				}
				A_SpawnItemEx("NapalmShockwave",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
				A_SpawnItemEx("ExplosionSmoke",frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3),0,SXF_NOCHECKPOSITION,0);
			}
			
			For(int b = 0; b != 2; b++)
			{
				A_SpawnProjectile("NapalmSub1",frandom(8,16),frandom(-8,8),Angle+frandom(-20,20),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_ABSOLUTEANGLE,frandom(35,70));
			}
		}
		TNT1 AAAAAAAA 1 BRIGHT
		{
			A_Explode((random(49,51) - (2*Invoker.Cycles)),128 + (8*Invoker.cycles),1,1,0,0,0,"Nothing","RadiusFire");
			A_RadiusGive("BurnDOT",64 + (8*Invoker.cycles),RGF_PLAYERS|RGF_MONSTERS,(random(19,21)));
			//BloodyHandler.DoBlast(Self,64 + (8*Invoker.Cycles), 2048 + (768*Invoker.Cycles));
			Invoker.Cycles++;
		}
		TNT1 AAAAAAAA 1
		{
			A_Explode((random(29,31) - (2*Invoker.Cycles)),128 + (2*Invoker.cycles),0,1,0,0,0,"Nothing","RadiusFire");
			A_RadiusGive("BurnDOT",64 + (8*Invoker.cycles),RGF_PLAYERS|RGF_MONSTERS,(random(14,16)));
			//BloodyHandler.DoBlast(Self,64 + (8*Invoker.Cycles), 2048 + (768*Invoker.Cycles));
			Invoker.Cycles++;
		}
		Stop;
	}
}

Class NapalmSub1 : NapalmBallAlt
{
	Default
	{
		+USEBOUNCESTATE
		+BOUNCEONFLOORS
		DamageFunction (random(29,31));
		Scale 0.4;
		Speed 16;
		Decal "PlasmaScorchLower";
	}
	States
	{
	Spawn:
		NAPB A 0 NoDelay A_SpawnItemEx("NapalmBallLight3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER,0);
		NAPB AAAABBBBCCCCDDDDEEEEFFFF 1 BRIGHT A_SpawnItemEx("NapalmTrailer",0,0,8,0,0,0,0,SXF_NOCHECKPOSITION,0);
		Goto Spawn+1;
	Bounce:
		TNT1 A 0 A_Jump(128,"Death");
		Goto Spawn+1;
	Death:
		TNT1 A 0
		{
			A_PlaySound("NapalmHit2",CHAN_WEAPON,2.78);
			For(int b = 0; b != 2; b++)
			{
				A_SpawnProjectile("NapalmSub2",frandom(8,16),frandom(-8,8),Angle+frandom(-20,20),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_ABSOLUTEANGLE,frandom(35,70));
			}
		}
	Fire:
		TNT1 A 0
		{
			A_Explode((random(29,31)),128,1,1,0,0,0,"Nothing","RadiusFire");
			A_RemoveChildren(1,RMVF_EVERYTHING,"","NapalmBallLight3");
			A_RadiusGive("BurnDOT",192,RGF_PLAYERS|RGF_MONSTERS,random(39,41));
			
			A_SpawnItemEx("LightNapalmHit3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER,0);
			
			A_QuakeEx(7,7,7,24,0,512,"Blank",QF_RELATIVE|QF_SCALEDOWN|QF_WAVE,0,0,0,256,0,1.5*randompick(-1,1),frandom(5.5,8.5)); A_Stop();
			
			A_SpawnItemEx("NapalmExplosion2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
			
			For(int i = 0; i != 3; i++)
			{
				A_SpawnItemEx("NapalmShockwave2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0);
				A_SpawnItemEx("ExplosionSmoke2",frandom(-8,8),frandom(-8,8),frandom(-8,8),frandom(-0.3,0.3),frandom(-0.3,0.3),frandom(-0.3,0.3),0,SXF_NOCHECKPOSITION,64);
			}
		}
		TNT1 AAAAAAAA 1 BRIGHT
		{
			A_Explode((random(14,16) - (2*Invoker.Cycles)),64 + (8*Invoker.cycles),1,1,0,0,0,"Nothing","RadiusFire");
			A_RadiusGive("BurnDOT",64 + (8*Invoker.cycles),RGF_PLAYERS|RGF_MONSTERS,(random(9,11)));
			//BloodyHandler.DoBlast(Self,64 + (8*Invoker.Cycles), 2048 + (256*Invoker.Cycles));
			Invoker.Cycles++;
		}
		Stop;
	}
}

Class NapalmSub2 : NapalmSub1
{
	Default
	{
		DamageFunction (random(24,26));
		Scale 0.35;
	}
	States
	{
	Death:
		TNT1 A 0
		{
			A_PlaySound("NapalmHit3",CHAN_WEAPON,2.78);
			For(int b = 0; b != 2; b++)
			{
				A_SpawnProjectile("NapalmSub3",frandom(8,16),frandom(-8,8),Angle+frandom(-20,20),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_ABSOLUTEANGLE,frandom(35,70));
			}
		}
		TNT1 A 0 A_Jump(256,"Fire");
		Stop;
	}
}

Class NapalmSub3 : NapalmSub1
{
	Default
	{
		DamageFunction (random(19,21));
		Scale 0.3;
	}
	States
	{
	Death:
		TNT1 A 0
		{
			A_PlaySound("NapalmHit3",CHAN_WEAPON,2.78);
			For(int b = 0; b != 2; b++)
			{
				A_SpawnProjectile("NapalmSub4",frandom(8,16),frandom(-8,8),Angle+frandom(-20,20),CMF_OFFSETPITCH|CMF_TRACKOWNER|CMF_ABSOLUTEANGLE,frandom(35,70));
			}
		}
		TNT1 A 0 A_Jump(256,"Fire");
		Stop;
	}
}

Class NapalmSub4 : NapalmSub1
{
	Default
	{
		DamageFunction (random(14,16));
		Scale 0.25;
	}
	States
	{
	Death:
		TNT1 A 0 A_PlaySound("NapalmHit4",CHAN_WEAPON,2.78);
		TNT1 A 0 A_Jump(256,"Fire");
		Stop;
	}
}

Class ExplosionSmoke2 : ExplosionSmoke { Default { Scale 0.25; } }
Class NapalmExplosion2 : ExplosionBase2
{
	Override Void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Scale.X = frandom(0.45,0.5); Scale.Y = Scale.X;
		A_FadeOut(frandom(0,0.05));
		For(int i = 0; i != 25; i++)
		{
			If(Random(0,1) == 1) { A_SpawnParticle("Yellow",SPF_FULLBRIGHT|SPF_RELATIVE,70,frandom(3,6),frandom(0,359),0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,8),0,0,-0.4,1.0,-1,0); }
			Else { A_SpawnParticle("Orange",SPF_FULLBRIGHT|SPF_RELATIVE,70,frandom(3,6),frandom(0,359),0,0,0,frandom(-4,4),frandom(-4,4),frandom(-1,8),0,0,-0.4,1.0,-1,0); }
		}
	}
}
Class NapalmShockwave2 : NapalmShockwave { Default { Scale 0.25; } }
Class NapalmBallGlow : Actor
{
	Default
	{
		+NOINTERACTION
		+BRIGHT
		+NOGRAVITY
		+NOBLOCKMAP
		+FORCEXYBILLBOARD
		+ROLLSPRITE
		+ROLLCENTER
		Scale 0.75;
		RenderStyle "Add";
	}
	Override Void PostBeginPlay() { Super.PostBeginPlay(); A_SetRoll(frandom(0,359)); }
	States
	{
	Spawn:
		NAPG ABCD 0 NoDelay A_Jump(128,"Fly");
		Loop;
	Fly:
		"####" "#" 1 
		{
			If(Target)
			{
				A_Warp(AAPTR_TARGET,-8,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
				A_SetRoll(roll+1,SPF_INTERPOLATE);
			}
			If(!Target)
			{
				Destroy();
			}
		}
		Loop;
	}
}


/////////////////////////////////////////////////*/

Class LightNapalm : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,120;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !master ) { Destroy(); return; }
		if ( master.player ) SetOrigin(master.Vec2OffsetZ(0,0,master.player.viewz),true);
		else SetOrigin(master.pos,true);
		args[LIGHT_INTENSITY] -= 20;
		if ( cnt++ > 6 ) Destroy();
	}
}

Class LightNapalm2 : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,192;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !master ) { Destroy(); return;}
		if ( master.player ) SetOrigin(master.Vec2OffsetZ(0,0,master.player.viewz),true);
		else SetOrigin(master.pos,true);
		args[LIGHT_INTENSITY] -= 24;
		if ( cnt++ > 8 ) Destroy();
	}
}

Class LightNapalmHit : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,56;
	}
	override void Tick()
	{
		Super.Tick();
		If(master) SetOrigin(master.pos,true);
		If(IsFrozen()) Return;
		If(cnt < 20) args[LIGHT_INTENSITY] += (8-(cnt*0.5));
		If(cnt > 9)
		{
			args[LIGHT_RED] *= 0.85;
			args[LIGHT_GREEN] *= 0.85;
			args[LIGHT_BLUE] *= 0.85;
		}
		If(cnt++ > 35) Destroy();
	}
}

Class LightNapalmHit2 : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,200;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !master )
		{
			Destroy();
			return;
		}
		if ( master.player ) SetOrigin(master.Vec2OffsetZ(0,0,master.player.viewz),true);
		else SetOrigin(master.pos,true);
		args[LIGHT_INTENSITY] -= 10;
		if ( cnt++ > 20 ) Destroy();
	}
}

Class LightNapalmHit3 : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,96;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !master )
		{
			Destroy();
			return;
		}
		if ( master.player ) SetOrigin(master.Vec2OffsetZ(0,0,master.player.viewz),true);
		else SetOrigin(master.pos,true);
		args[LIGHT_INTENSITY] -= 8;
		if ( cnt++ > 16 ) Destroy();
	}
}

Class NapalmBallLight : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,64;
	}
	
	Override void Tick()
	{
		Super.Tick();
		If(!Master) { Destroy(); Return; }
		SetOrigin(Master.Pos,true);
		If(IsFrozen()) Return;
		args[LIGHT_INTENSITY] = 72 * frandom(0.95,1.05);
	}
}

Class NapalmExplosionLight : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,64;
	}
	override void Tick()
	{
		Super.Tick();
		if(master) SetOrigin(master.pos,true);
		If(IsFrozen()) Return;
		args[LIGHT_INTENSITY] -= 1;
		args[LIGHT_RED] *= 0.9;
		args[LIGHT_GREEN] *= 0.9;
		args[LIGHT_BLUE] *= 0.9;
		if ( cnt++ > 35 ) Destroy();
	}
}

Class NapalmBallLight2 : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,96;
	}
	
	Override void Tick()
	{
		Super.Tick();
		If(!Master) { Destroy(); Return; }
		SetOrigin(Master.Pos,true);
		args[LIGHT_INTENSITY] = 96 * frandom(0.95,1.05);
	}
}

Class NapalmBallLight3 : DynamicLight
{
	int cnt;
	Default
	{
		DynamicLight.Type "Point";
		args 255,192,16,32;
	}
	
	Override void Tick()
	{
		Super.Tick();
		If(!Master) { Destroy(); Return; }
		SetOrigin(Master.Pos,true);
		args[LIGHT_INTENSITY] = 32 * frandom(0.95,1.05);
	}
}

Class NapalmFireFXLight : FireFXLight {}