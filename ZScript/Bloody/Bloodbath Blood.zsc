Class BloodbathBlood : Blood replaces Blood
{
	Default
	{
		+NOBLOCKMAP
		+PUFFGETSOWNER
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+DONTSPLASH
		+NOTELEPORT
		+NOGRAVITY
		+ROLLSPRITE
		+ROLLCENTER
		+RIPPER
		+BLOODLESSIMPACT
		+PAINLESS
		+THRUACTORS
		-RANDOMIZE
		-SOLID
		-ALLOWPARTICLES
		Scale 0.5;
		RenderStyle "Translucent";
	}
	
	const BLOODY = SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION;
	
	/*Override void BeginPlay()
	{
		Super.BeginPlay();
		BloodbathHandler.TranslateBlood(Target, Self);
	}*/
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SetRoll(frandom(-20,20));
		bSPRITEFLIP = random(0,1);
		Scale.X *= frandom(0.95,1.05);
		Scale.Y = Scale.X;
		
		//A_Log(String.Format("%s", Target.GetTag()));
		
		//BloodbathHandler.TranslateBlood(Target, Self);
		CopyBloodColor(Target);
		Translation = BloodColor;
		
		CVar TrailChance = Cvar.FindCVar("BB_TrailChance");
		CVar ParticleChance = Cvar.FindCVar("BB_ParticleChance");
		
		Actor a = Spawn("BloodbathTrailer", Self.Pos);
		If(a)
		{
			If(Random[Blood](0, 255) < TrailChance.GetInt() * 32)
					a.Destroy();
			
			If(Target)
			{
				a.Target = Self.Target;
				a.Vel.X = (Target.Vel.X) + FRandom[Blood](-6, 6);
				a.Vel.Y = (Target.Vel.Y) + FRandom[Blood](-6, 6);
				a.Vel.Z = (Target.Vel.Z) + FRandom[Blood](0, 12);
				a.CopyBloodColor(Target);
			}
			
			Else
				a.Destroy();
		}
		
		For(int i = 0; i != 40; i++)
		{
			Actor b = Spawn("BloodbathParticles", Self.Pos);
			If(b)
			{
				If(Random[Blood](0, 255) < ParticleChance.GetInt() * 64)
						b.Destroy();
				
				If(Target)
				{
					b.Target = Self.Target;
					b.Vel.X = (Target.Vel.X) + FRandom[Blood](-6, 6);
					b.Vel.Y = (Target.Vel.Y) + FRandom[Blood](-6, 6);
					b.Vel.Z = (Target.Vel.Z) + FRandom[Blood](0, 12);
					b.CopyBloodColor(Target);
				}
				
				Else
					b.Destroy();
			}
		}
	}
	
	States
	{
	Spawn:
		TNT1 AAAA 0;
		B1_A ABCD 3;
		B1_A E 1
		{
			A_SetRoll(0,SPF_INTERPOLATE);
			A_ChangeVelocity(0,0,-1,CVF_RELATIVE);
			Scale.X *= 1.05; Scale.Y = Scale.X;
			A_FadeOut(0.1,1);
		}
		Wait;
	}
}

Class BloodbathCorpseHitboxBlood : BloodbathBlood
{
	Default { Scale 0.25; +NODECAL }
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		CVar TrailChance = Cvar.FindCVar("BB_TrailChance");
		CVar ParticleChance = Cvar.FindCVar("BB_ParticleChance");
		
		Actor c = Spawn("BloodbathChunk1b", Self.Pos + (0, 0, 8));
		If(c)
		{
			If(Random[Blood](0, 255) < TrailChance.GetInt() * 32)
					c.Destroy();
			
			If(Target)
			{
				c.Target = Self.Target;
				c.Vel.X = (Target.Vel.X) + FRandom[Blood](-6, 6);
				c.Vel.Y = (Target.Vel.Y) + FRandom[Blood](-6, 6);
				c.Vel.Z = (Target.Vel.Z) + FRandom[Blood](0, 12);
				c.CopyBloodColor(Target);
			}
			
			Else
				c.Destroy();
		}
	}
}

Class BloodbathTrailer : Actor
{
	Default
	{
		PROJECTILE;
		-NOGRAVITY
		+DONTSPLASH
		+WINDTHRUST
		+RIPPER
		+BLOODLESSIMPACT
		+PAINLESS
		+THRUACTORS
		Gravity 0.75;
		Radius 1;
		Height 1;
		Decal "BloodSplat";
	}
	
	const BLOODY = SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION;
	
	Override int SpecialMissileHit(Actor victim)
	{ Return 1; }
	
	States
	{
	Spawn:
		TNT1 A 1 NoDelay 
		{
			A_SpawnItemEx("BloodbathTrail",0,0,0,0,0,0,0,BLOODY|SXF_TRANSFERPOINTERS,0);
			//A_SpawnItemEx("BloodbathTrail",-8,0,0,0,0,0,0,BLOODY|SXF_TRANSFERPOINTERS,0);
		}
		Loop;
	Death:
		TNT1 A 0;
		TNT1 A 0
		{
			CVar PoolChance = Cvar.FindCVar("BB_PoolChance");
			A_PlaySound("BloodGround",CHAN_BODY);
			A_SpawnItemEx("BloodbathBloodPool",0,0,0,0,0,0,0,BLOODY|SXF_TRANSFERPOINTERS, PoolChance.GetInt() * 32);
		}
		B3_A ABCDE 5;
		Stop;
	}
}

Class BloodbathTrail : BloodbathTrailer
{
	Default
	{
		Gravity 0.075;
		RenderStyle "Translucent";
		Scale 0.67;
		Decal "None";
		-WINDTHRUST
		+FORCEDECAL
		+RANDOMIZE
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
	} int timer;
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_SetRoll(frandom(0,359));
		bSPRITEFLIP = random(0,1);
		Scale.X *= frandom(0.95,1.05);
		Scale.Y = Scale.X;
	}
	
	Override void Tick()
	{
		Super.Tick();
		If(GlobalFreeze||Level.Frozen) Return;
		If(Timer++ >= 105)
		{
			Destroy();
			Return;
		}
	}
	
	States
	{
	Spawn:
		B2_A ABCDE 5;
		Loop;
	Death:
		"####" "#" 1 { A_FadeOut(0.075,1); Scale.Y *= 0.9; Scale.X *= 1.1; }
		Wait;
	}
}

Class BloodbathParticles : BloodbathTrail
{
	Default { Scale 0.25; Gravity 0.67; Alpha 0.75; }
	States
	{
	Spawn:
		B5_A B 1;
		Loop;
	}
}

Class BloodbathBloodPool : Actor
{
	Default
	{
		+FLATSPRITE
		+MOVEWITHSECTOR
		+NOBLOCKMAP
		+NOTIMEFREEZE
		RenderStyle "Translucent";
		Scale 0.0;
	}
	
	Override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		If(Self.Pos.Z == Self.FloorZ) { bFLOORHUGGER = 1; bCEILINGHUGGER = 0; }
		If(Self.Pos.Z == Self.CeilingZ) { bFLOORHUGGER = 0; bCEILINGHUGGER = 1; }
		
		If(!bFLOORHUGGER && !bCEILINGHUGGER)
		{
			Destroy();
			Return;
		}
		
		A_SetAngle(frandom(0,359));
		bSPRITEFLIP = random(0,1);
		Scale.X *= frandom(0.9,1.1);
		Scale.Y = Scale.X;
		A_FadeOut(frandom(0,0.2));
	} int timer;
	
	States
	{
	Spawn:
		B5_A AAAAAAAAAAAAAAA 1 { Scale.X += frandom(0.04,0.05); Scale.Y = Scale.X; }
	Spawned:
		B5_A A 700
		{
			CVar GibDuration = Cvar.FindCVar("BB_GibDuration");
			A_SetTics(140 * GibDuration.GetInt());
		}
		B5_A A 1
		{
			A_FadeOut(0.01,1);
			Scale.X *= 0.975; Scale.Y = Scale.X;
		}
		Wait;
	}
}