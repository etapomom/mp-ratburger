Extend Class BloodyMonster
{
	Enum ChaseTypes
	{
		CHASE_Strafe 		= 0,
		CHASE_Melee			= 1,
		CHASE_Kite			= 2,
		CHASE_Doom			= 3,
		CHASE_DoomFast		= 4,
	}	
	
	Void BloodyChase(	StateLabel Melee = "Melee",
						StateLabel Missile = "Missile",
						double InitialSpeed = 0.05,
						double BuildUp = 0.1,
						double MaxSpeed = 0.75,
						int Type = 0,
						int DodgeChance = 8,
						int ActiveLoops = 1,
						int KitingRange = 192
						)
					
	{
		Double MoveSpeed;
		MoveSpeed = (Run * BuildUp) + InitialSpeed;
		If(MoveSpeed < InitialSpeed) MoveSpeed = InitialSpeed;
		If(MoveSpeed > MaxSpeed) MoveSpeed = MaxSpeed; 
		If(Random(0, 255) <= DodgeChance && Level.Time % 7 == 0 && DodgeTimer <= 0) 
		{
			DodgeDir = RandomPick(-1, 1);
			DodgeTimer = 35 * fRandom(0.5, 2) - DodgeChance;
			If(DodgeTimer < 18) DodgeTimer = 18;
		}
		
		If(Type >= 3) 
		{
			If(!Target) 
			{ 
				A_Wander();
				A_LookEx(0, 0, 0, 0, 360, "See");
				Return;
			}
			
			If(Random(0, 255) >= 254) A_Chase(Melee, Missile, CHF_NOPLAYACTIVE);
			Else A_Chase(Melee, Null, CHF_NOPLAYACTIVE);
			
			For(int la = ActiveLoops; la > 0; la--) 
			{
				A_Chase(Null, Null, CHF_DONTMOVE|CHF_DONTTURN);
			}
			
			Return;
		}
		
		If(!Target) 
		{ 
			A_SetAngle(Angle + frandom(-36, 36));
			A_LookEx(0, 0, 0, 0, 360, "See");
		}
		
		If(Random(0, 255) >= 192) A_Chase(Melee, Missile, CHF_DONTMOVE|CHF_NOPLAYACTIVE);
		Else A_Chase(Melee, Null, CHF_DONTMOVE|CHF_NOPLAYACTIVE);
		
		If(Target)
		{
			For(int l = ActiveLoops; l > 0; l--) A_Chase(Null, Null, CHF_DONTMOVE/*|CHF_DONTTURN*/);
			
			If(!CheckSight(Target, SF_IGNOREVISIBILITY))
			{
				A_Chase(Null, Null, CHF_NOPLAYACTIVE);
				A_Stop();
				A_ChangeVelocity(MoveSpeed, 0, Vel.Z, CVF_RELATIVE|CVF_REPLACE);
				Return;
			}
			
			If(Type == 0)
			{
				If(CheckSight(Target, SF_IGNOREVISIBILITY))
				{
					A_Face(Target, 48 + (MaxSpeed * 96), 0, 0, 0, FAF_MIDDLE);
					If(Random(0,255) >= DodgeChance) A_ChangeVelocity(0, MaxSpeed * frandompick(-1.5, 1.5), 0, CVF_RELATIVE);
				}
			}
			
			If(Type == 1 && CheckSight(Target, SF_IGNOREVISIBILITY))
			{
				A_Face(Target, Max(0.01, 18), 0, flags: FAF_MIDDLE);
			}
			
			If(Type == 2)
			{
				If(CheckSight(Target, SF_IGNOREVISIBILITY))
				{
					A_Face(Target, 360, 0, Flags: FAF_MIDDLE);
					If(Random(0,255) >= DodgeChance) A_ChangeVelocity(0, MaxSpeed * frandompick(-1.75, 1.75), 0, CVF_RELATIVE);
				}
			}
			
			If(Type == 3)
			{
				If(CheckSight(Target, SF_IGNOREVISIBILITY))
				{
					A_Face(Target, Max(1, MaxSpeed * 128), 0, Flags: FAF_MIDDLE);
					If(Random(0,255) >= DodgeChance) A_ChangeVelocity(0, MaxSpeed * frandompick(-3.25, 3.25), 0, CVF_RELATIVE);
				}
			}
			
			If(Type == 4)
			{
				If(CheckSight(Target, SF_IGNOREVISIBILITY))
				{
					A_Face(Target, 360, 0, Flags: FAF_MIDDLE);
					If(Random(0, 255) >= 250) A_Turn(FRandom(-8, 8));
					If(Random(0, 255) <= DodgeChance * 8) A_ChangeVelocity(0, MoveSpeed * DodgeDir, 0, CVF_RELATIVE);
					If(Distance2D(Target) < KitingRange && KiteTimer <= 0) A_ChangeVelocity(MoveSpeed, 0, 0, CVF_RELATIVE);
					Else 
					{ 
						A_ChangeVelocity(-MoveSpeed, 0, 0, CVF_RELATIVE); 
						KiteTimer = 35 * fRandom(0.5, 2) - DodgeChance;
						If(KiteTimer < 18) KiteTimer = 18;
					}
					Return;
				}
			}
		}
		
		If(Random(0, 255) >= 192 && Target) A_FaceTarget();
			
		A_ChangeVelocity(MoveSpeed, 0, 0, CVF_RELATIVE);
	}
	
	Action void SmoothFace(double maxturnangle)
	{
		If(Target && Target != Self)
		{
			double diff = deltaangle(angle, AngleTo(Target));
			double delta = abs(diff);
			delta /= 8;
			Angle += clamp(diff, -5., 5.);
		}
	}
}