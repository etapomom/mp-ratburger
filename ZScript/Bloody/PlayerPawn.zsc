Class ChosenPlayer : DoomPlayer
{
	Default
	{
		Health 100;
		Player.MaxHealth 100;
		Mass 100;
		YScale 1.1;
		XScale 0.9;
		Player.AttackZOffset 12;
		Player.FallingScreamSpeed 20, 48;
		Player.DisplayName "Caleb the Chosen One";
		//Player.DamageScreenColor "Red", 0.0;
		//Player.StartItem "TempWeapon";
	}
	
	Override void DeathThink ()
	{
		let player = self.player;
		int dir;
		double delta;

		player.Uncrouch();
		TickPSprites();

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{ // Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else If(!bIceCorpse)
		{
			If(!CountInv("DeathTicked")) { A_GiveInventory("DeathTicked"); Pitch = 0.; }
			/*player.deltaviewheight = 0;
			if (player.viewheight > 4) player.viewheight -= 2;
			if (player.viewheight < 4) player.viewheight = 	4;*/
			
			/*If(Pitch > -45) 		Pitch -= 1;
			if(abs(Pitch) > 45) 	Pitch = -45.;*/
			
			If(Player.ViewHeight > 2)
			{
				double viewheightdelta = (2. + player.viewheight) / 28;
				player.viewheight -= viewheightdelta;
			}
			
			if (Pitch > -45.)
			{
				double lookDelta = (-45. - Pitch) / 14;
				Pitch += lookDelta;
			}
		}
		player.mo.CalcHeight();
			
		if (player.attacker && player.attacker != self)
		{ // Watch killer
			double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);
	
			if (delta < 10)
			{ // Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 40.;
			Angle += clamp(diff, -4., 4.);
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}		

		if ((player.cmd.buttons & BT_USE ||
			((deathmatch || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn)
		{
			if (Level.maptime >= player.respawn_time || ((player.cmd.buttons & BT_USE) && player.Bot == NULL))
			{
				player.cls = NULL;		// Force a new class if the player is using a random class
				player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;
				if (special1 > 2)
				{
					special1 = 0;
				}
			}
		}
	}
	
	/*Override void DeathThink ()
	{
		Super.DeathThink();
		If(!CountInv("DeathTicked")) { A_GiveInventory("DeathTicked"); Pitch = 0.; }
		If(!bIceCorpse)
		{
			player.deltaviewheight = 0;
			if (player.viewheight > 4) player.viewheight -= 1;
			if (player.viewheight < 4) player.viewheight = 	4;
			
			if (Pitch > -45) 		Pitch -= 3;
			if (abs(Pitch) < 45) 	Pitch = 45.;
		}
		player.mo.CalcHeight();
	}*/
	
	Override Void CheatGive(String name, int amount)
	{
		super.CheatGive(name, amount);
		if (name ~== "all" || name ~== "armor" || name ~== "everything")
		{
			CheatTake("Armor", 1);
			super.CheatGive("SuperArmorPickup", 1);
		}
	}
	
	Override Int DamageMObj(Actor Inflictor, Actor Source, Int Damage, Name MOD, Int Flags, Double Angle)
	{
		int hp1 = Player.Health;
		Super.DamageMObj(Inflictor, Source, Damage, MOD, Flags, Angle);
		int hp2 = Player.Health;
		
		//A_Log(String.Format("Damage: %d -- Prev. HP: %d -- Curr. HP: %d", Damage, hp1, hp2), True);
		
		If(hp2 < hp1 && MOD != 'EGO')
		{
			A_PlayerPain(hp1, hp2, mod);
			
			double al = Clamp(Damage * 0.01, 0.275, 1);
			int ti = Clamp(Damage * 1.5, 18, 175);
			color clr;
			
			clr = "Red";
			
			If(MOD == 'Octabrain') 		clr = "Purple";
			If(MOD == 'Shrinker')		clr = "Green";
			If(MOD == 'Corrosive')		clr = "Green";
			If(MOD == 'Slime')			clr = "Green";
			If(MOD == 'Poison')			clr = "Green";
			If(MOD == 'Fire')			clr = "Orange";
			IF(MOD == 'Lava')			clr = "Orange";
			If(MOD == 'Shock')			clr = "White";
			If(MOD == 'Ice')			clr = "Blue";
			If(MOD == 'Cold')			clr = "Blue";
			If(MOD == 'Drowning')		clr = "Black";
			
			If(hp2 <= 0) { al = 1; ti = 350; }
			
			//A_SetBlend(clr, al, ti);
		}
		
		Return Damage;
	}
	
	Void A_PlayerPain(int hp1, int hp2, name type)
	{
		/*If(hp1 <= 0 || hp2 <= 0) 
			Return;*/
		
		int dmg = hp1 - hp2;
		sound ouch;
		
		Ouch = "Ouch";
		
		A_StopSound(CHAN_VOICE);
		
		If(type == 'Drowning') Ouch = "Drown";
		If(type == 'Choke') Ouch = "Choke";
		If(type == 'Falling') Ouch = "Ouch";
		
		If(hp1 <= 0 || hp2 <= 0) 
		{
			If(Type == 'Drowning' || Type == 'Choke') Ouch = "Choked";
			Else Ouch = "Death";
		}
		
		A_StartSound(Ouch, CHAN_VOICE);
	}
	
	bool beastready;
	Override Void Tick()
	{	
		Super.Tick();
		
		If(!Player || !Player.mo || Player.mo != Self) 
		{ Return; }
		
		If(Health>0 && countinv("deathticked")) 
		{
			Pitch = 0.;
			A_SetInventory("DeathTicked", 0);
		}
		
		If(InStateSequence(CurState, ResolveState("Spawn")) && Player.Health > 0)
				A_GiveInventory("CalebIdleTimer", 1);
		
		Else A_SetInventory("CalebIdleTimer",0);
		
		If(Level.Time % 7 == 0 && Player.Health > 0)
		{
			ThinkerIterator Baddies = ThinkerIterator.Create();
			Actor mo;
			While(mo = Actor(Baddies.Next()))
			{
				If(!mo || mo.Health <= 0 || !mo.bISMONSTER || !mo.bSHOOTABLE || mo.Distance2D(self) > 1024 || !mo.CheckSight(Self,SF_IGNOREVISIBILITY))
					Continue;
				
				If(mo && mo.Health > 0 && mo.Distance2D(Self) < 4096 && mo.bISMONSTER && mo.bBOSS && mo.CheckSight(Self,SF_IGNOREVISIBILITY) && mo.Target && !mo.CountInv("CalebBossChecked"))
				{
					mo.A_GiveInventory("CalebBossChecked",1);
					A_GiveInventory("CalebBossTalk",1);
				}
			}
		}
		
		If(!BeastReady && CountInv("BeastMeter") >= 5000) 
		{ 
			BeastReady = True; 
			A_StartSound("Ping", CHAN_AUTO, CHANF_OVERLAP|CHANF_LOCAL); 
			A_SetBlend("DarkRed", 0.67, 24);
			A_StartSound("BeastReady", CHAN_AUTO, CHANF_OVERLAP|CHANF_LOCAL);
			A_QuakeEx(1, 1, 1, 18, 0, 8, "");
			A_GiveInventory("BloodbathClaws");
			A_SelectWeapon("BloodbathClaws");
		}
		
		If(CountInv("BeastMeter") < 5000) BeastReady = False;
	}
	
	States
	{
	Pain:
		PLAY G 4;
		PLAY G 4;
		Goto Spawn;
	Death:
		PLAY H 10;
		PLAY I 10;
		PLAY J 10 A_NoBlocking;
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 5;
		PLAY P 5;
		PLAY Q 5 A_NoBlocking;
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
	}
}

Class BeastMeter : Inventory { Default { Inventory.MaxAmount 5000; } }

Class CalebTalkTimer : Inventory { Default { Inventory.MaxAmount 350; } }
Class CalebTalkQueue : Inventory { Default { Inventory.MaxAmount 35; } }
Class CalebMonsterCounter : Inventory { Default { Inventory.MaxAmount 100; } }
Class CalebKillTalk : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebGibTalk : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebMonsterTalk : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebBossTalk : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebBossKillTalk : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebBrainTalk : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebBossChecked : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebStartTalk : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebStartTalked : Inventory { Default { Inventory.MaxAmount 1; } }
Class CalebIdleTimer : Inventory { Default { Inventory.MaxAmount 350; } }
Class CalebStarted : Inventory { Default { Inventory.MaxAmount 1; } }
Class DeathTicked : Inventory { Default { Inventory.MaxAmount 1; } }

//RIP ACS LMAO
Class CalebTalkHandler : Inventory
{
	Default { Inventory.MaxAmount 1; }
	
	bool init;
	Override Void DoEffect()
	{
		Super.DoEffect();
		Let p = Owner;
		
		If(!Init)
		{
			p.A_SetInventory("CalebTalkTimer",0); 
			p.A_SetInventory("CalebMonsterCounter",0);
			p.A_SetInventory("CalebMonsterTalk",0);
			p.A_SetInventory("CalebBossTalk",0);
			p.A_SetInventory("CalebBrainTalk",0);
			p.A_SetInventory("CalebKillTalk",0);
			p.A_SetInventory("CalebGibTalk",0);
			p.A_SetInventory("CalebIdleTimer",0);
			If(!p.CountInv("CalebStartTalked")) { p.A_GiveInventory("CalebStartTalk"); }
			Init = True;
		}
		
		If(Init && GetCVar("Blood_CalebTalk"))
		{
			If(p.CountInv("CalebStartTalk") && !p.CountInv("CalebStartTalked") && GetCVar("Blood_StartTalk"))
			{
				p.A_PlaySound("Start",CHAN_VOICE);
				p.A_GiveInventory("CalebStartTalked",1);
			}
			
			If(p.CountInv("CalebKillTalk") && !p.CountInv("CalebTalkTimer") && GetCVar("Blood_KillTalk"))
			{
				p.A_PlaySound("KillTalk",CHAN_VOICE);
				p.A_SetInventory("CalebTalkTimer",105);
			}
			
			If(p.CountInv("CalebGibTalk") && !p.CountInv("CalebTalkTimer") && GetCVar("Blood_GibTalk") && GetCVar("Blood_KillTalk"))
			{
				p.A_PlaySound("GibTalk",CHAN_VOICE);
				p.A_SetInventory("CalebTalkTimer",105);
			}
			
			If(p.CountInv("CalebBossTalk") && !p.CountInv("CalebTalkTimer") && GetCVar("Blood_BossTalk"))
			{
				p.A_PlaySound("SeeBadass",CHAN_VOICE);
				p.A_SetInventory("CalebTalkTimer",350);
			}
			
			If(p.CountInv("CalebBossKillTalk") && GetCVar("Blood_KillTalk"))
			{
				p.A_PlaySound("BadassKill",CHAN_VOICE);
				p.A_SetInventory("CalebTalkTimer",350);
			}
			
			If(p.CountInv("CalebMonsterTalk") && !p.CountInv("CalebTalkTimer") && GetCVar("Blood_MonsterTalk"))
			{
				p.A_PlaySound("TooMany",CHAN_VOICE);
				p.A_SetInventory("CalebTalkTimer",350);
			}
			
			If(p.CountInv("CalebBrainTalk") && !p.CountInv("CalebTalkTimer") && GetCVar("Blood_BossTalk"))
			{
				p.A_PlaySound("SeeBrain",CHAN_VOICE);
				p.A_SetInventory("CalebTalkTimer",350);
			}
			
			If(p.CountInv("CalebIdleTimer") >= 350 && !p.CountInv("CalebTalkTimer") && GetCVar("Blood_IdleTalk"))
			{
				If(Random[Talk](1, 10) >= 8 && GetCVar("Blood_IdleSong")) p.A_PlaySound("IdleSong",CHAN_VOICE);
				Else p.A_PlaySound("Idle",CHAN_VOICE);
				p.A_SetInventory("CalebTalkTimer",350);
			}
			
			If(p.CountInv("CalebTalkTimer") != 0)
			{
				p.A_SetInventory("CalebMonsterTalk",0);
				p.A_SetInventory("CalebBossTalk",0);
				p.A_SetInventory("CalebBossKillTalk",0);
				p.A_SetInventory("CalebBrainTalk",0);
				p.A_SetInventory("CalebKillTalk",0);
				p.A_SetInventory("CalebGibTalk",0);
				p.A_SetInventory("CalebStartTalk",0);
				p.A_SetInventory("CalebIdleTimer",0);
			}
			
			If(p.CountInv("CalebTalkTimer")) { p.A_TakeInventory("CalebTalkTimer",1); }
		}
	}
}