Class BloodyListMenu : ListMenu
{
	TextureID drip, blood;
	Override void Init(Menu parent, ListMenuDescriptor desc)
	{
		Super.Init(parent, desc);
		Blood 	= TexMan.CheckForTexture("MENUGFXA", TexMan.Type_Any);
		Drip	= TexMan.CheckForTexture("MENUGFXI", TexMan.Type_Any);
	}
	
	Override void Drawer()
	{
		Screen.DrawTexture(	Blood, True, 0, 0, 
							DTA_VirtualWidthF, Screen.GetWidth() / (Screen.GetWidth() / 320.),
							DTA_VirtualHeightF, Screen.GetHeight() / (Screen.GetHeight() / 240.), 
							DTA_KeepRatio, true,
							DTA_TopOffset, 0, 
							DTA_LeftOffset, 0);
		
		Super.Drawer();
	}
}

Class ListMenuItemBloodyTextItem : ListMenuItemSelectable
{
	String mText;
	Font mFont;
	int mColor;
	int mSpacing;

	void Init( ListMenuDescriptor desc, String text, String hotkey, Name child, int param = 0 )
	{
		Super.Init(desc.mXpos,desc.mYpos,desc.mLinespacing,child,param);
		mText = text;
		mFont = Font.GetFont('BigFont');
		mColor = Font.CR_UNTRANSLATED;
		mSpacing = desc.mLineSpacing;
		mHotkey = hotkey.GetNextCodePoint(0);
	}

	void InitDirect( double x, double y, int height, String hotkey, String text, Font font, int color, int color2, Name child, int param = 0 )
	{
		Super.Init(x,y,height,child,param);
		mText = text;
		mFont = Font.GetFont('BigFont');
		mColor = Font.CR_UNTRANSLATED;
		int pos = 0;
		mHotkey = hotkey.GetNextCodePoint(0);
	}

	override void Drawer( bool selected )
	{
		String str = StringTable.Localize(mText);
		let fnt = (generic_ui||!mFont.CanPrint(str))?NewSmallFont:mFont;
		double basex = floor(0.05*(CleanWidth_1-fnt.StringWidth(str)));
		double basey = floor(0.1*(CleanHeight_1-mSpacing*5));
		Screen.DrawText(	fnt,
							(fnt==NewSmallFont)?Font.CR_GREEN:mColor,
							(basex+mXPos)*CleanXFac_1,
							(basey+mYpos)*CleanYFac_1,
							str,
							DTA_CleanNoMove_1,true,
							DTA_Alpha,selected?1.0:0.5,
							DTA_VirtualWidthF, Screen.GetWidth() / (Screen.GetWidth() / 320.),
							DTA_VirtualHeightF, Screen.GetHeight() / (Screen.GetHeight() / 240.));
	}

	override int GetWidth()
	{
		String str = StringTable.Localize(mText);
		let fnt = (generic_ui||!mFont.CanPrint(str))?NewSmallFont:mFont;
		return max(1,fnt.StringWidth(StringTable.Localize(mText)));
	}

	override bool CheckCoordinate( int x, int y )
	{
		String str = StringTable.Localize(mText);
		let fnt = (generic_ui||!mFont.CanPrint(str))?NewSmallFont:mFont;
		int w = fnt.StringWidth(str);
		int h = fnt.GetHeight();
		double basex = floor(0.5*(CleanWidth_1-w))+mXPos;
		double basey = floor(0.5*(CleanHeight_1-mSpacing*5))+mYPos;
		return (mEnabled && (x >= basex) && (x < basex+w) && (y >= basey) && (y < basey+h));
	}

	override void DrawSelector( double xofs, double yofs, TextureID tex )
	{
		// nothing
	}
}
/*
// because I can't change the font or color in mapinfo
Class GreenMessageBox : MessageBoxMenu
{
	override void Init( Menu parent, String message, int messagemode, bool playsound, Name cmd, voidptr native_handler )
	{
		Super.Init(parent,message,messagemode,playsound,cmd,native_handler);
		Font NFont = Font.GetFont('UMedFont');
		if ( !generic_ui )
		{
			if ( NFont && NFont.CanPrint(message) && NFont.CanPrint("$TXT_YES") && NFont.CanPrint("$TXT_NO") ) textFont = NFont;
			else if ( OriginalSmallFont && OriginalSmallFont.CanPrint(message) && OriginalSmallFont.CanPrint("$TXT_YES") && OriginalSmallFont.CanPrint("$TXT_NO") ) textFont = OriginalSmallFont;
		}
		if ( !textFont )
		{
			arrowFont = textFont = NewSmallFont;
			int factor = (CleanXfac+1)/2;
			destWidth = screen.GetWidth()/factor;
			destHeight = screen.GetHeight()/factor;
			selector = "â–¶";
		}
		else
		{
			arrowFont = ConFont;
			destWidth = CleanWidth;
			destHeight = CleanHeight;
			selector = "\xd";
		}
		int mr1 = destWidth/2+10+textFont.StringWidth(Stringtable.Localize("$TXT_YES"));
		int mr2 = destWidth/2+10+textFont.StringWidth(Stringtable.Localize("$TXT_NO"));
		mMouseRight = MAX(mr1,mr2);
		mMessage = textFont.BreakLines(Stringtable.Localize(message),generic_ui?600:300);
	}
	override void Drawer ()
	{
		int i, y;
		int fontheight = textFont.GetHeight();
		y = destHeight/2;
		int c = mMessage.Count();
		y -= c*fontHeight/2;
		for ( i=0; i<c; i++ )
		{
			screen.DrawText (textFont,Font.CR_GREEN,(destWidth/2)-mMessage.StringWidth(i)/2,y,mMessage.StringAt(i),DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
			y += fontheight;
		}
		if ( mMessageMode == 0 )
		{
			y += fontheight;
			mMouseY = y;
			screen.DrawText(textFont,(messageSelection==0)?Font.CR_WHITE:Font.CR_DARKGREEN,destWidth/2,y,Stringtable.Localize("$TXT_YES"),DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
			screen.DrawText(textFont,(messageSelection==1)?Font.CR_WHITE:Font.CR_DARKGREEN,destWidth/2,y+fontheight,Stringtable.Localize("$TXT_NO"),DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
			if ( messageSelection >= 0 )
			{
				if ( (MenuTime()%8) < 6 )
				{
					screen.DrawText(arrowFont,OptionMenuSettings.mFontColorSelection,(destWidth/2)-11,y+fontheight*messageSelection,selector,DTA_VirtualWidth,destWidth,DTA_VirtualHeight,destHeight,DTA_KeepRatio,true);
				}
			}
		}
	}
}